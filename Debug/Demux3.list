
Demux3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065fc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080067e8  080067e8  000167e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006868  08006868  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006870  08006870  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006870  08006870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006874  08006874  00016874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08006878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000094  0800690c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  0800690c  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cee1  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000204b  00000000  00000000  0002cf9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df8  00000000  00000000  0002eff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf0  00000000  00000000  0002fde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cfb0  00000000  00000000  00030ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab66  00000000  00000000  0004da88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6da5  00000000  00000000  000585ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ff393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ff0  00000000  00000000  000ff410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000094 	.word	0x20000094
 8000204:	00000000 	.word	0x00000000
 8000208:	080067cc 	.word	0x080067cc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000098 	.word	0x20000098
 8000224:	080067cc 	.word	0x080067cc

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	d1ed      	bne.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_uldivmod>:
 8001188:	b953      	cbnz	r3, 80011a0 <__aeabi_uldivmod+0x18>
 800118a:	b94a      	cbnz	r2, 80011a0 <__aeabi_uldivmod+0x18>
 800118c:	2900      	cmp	r1, #0
 800118e:	bf08      	it	eq
 8001190:	2800      	cmpeq	r0, #0
 8001192:	bf1c      	itt	ne
 8001194:	f04f 31ff 	movne.w	r1, #4294967295
 8001198:	f04f 30ff 	movne.w	r0, #4294967295
 800119c:	f000 b974 	b.w	8001488 <__aeabi_idiv0>
 80011a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011a8:	f000 f806 	bl	80011b8 <__udivmoddi4>
 80011ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b4:	b004      	add	sp, #16
 80011b6:	4770      	bx	lr

080011b8 <__udivmoddi4>:
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	468c      	mov	ip, r1
 80011be:	4604      	mov	r4, r0
 80011c0:	9e08      	ldr	r6, [sp, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d14b      	bne.n	800125e <__udivmoddi4+0xa6>
 80011c6:	428a      	cmp	r2, r1
 80011c8:	4615      	mov	r5, r2
 80011ca:	d967      	bls.n	800129c <__udivmoddi4+0xe4>
 80011cc:	fab2 f282 	clz	r2, r2
 80011d0:	b14a      	cbz	r2, 80011e6 <__udivmoddi4+0x2e>
 80011d2:	f1c2 0720 	rsb	r7, r2, #32
 80011d6:	fa01 f302 	lsl.w	r3, r1, r2
 80011da:	fa20 f707 	lsr.w	r7, r0, r7
 80011de:	4095      	lsls	r5, r2
 80011e0:	ea47 0c03 	orr.w	ip, r7, r3
 80011e4:	4094      	lsls	r4, r2
 80011e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011ea:	fbbc f7fe 	udiv	r7, ip, lr
 80011ee:	fa1f f885 	uxth.w	r8, r5
 80011f2:	fb0e c317 	mls	r3, lr, r7, ip
 80011f6:	fb07 f908 	mul.w	r9, r7, r8
 80011fa:	0c21      	lsrs	r1, r4, #16
 80011fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001200:	4599      	cmp	r9, r3
 8001202:	d909      	bls.n	8001218 <__udivmoddi4+0x60>
 8001204:	18eb      	adds	r3, r5, r3
 8001206:	f107 31ff 	add.w	r1, r7, #4294967295
 800120a:	f080 811c 	bcs.w	8001446 <__udivmoddi4+0x28e>
 800120e:	4599      	cmp	r9, r3
 8001210:	f240 8119 	bls.w	8001446 <__udivmoddi4+0x28e>
 8001214:	3f02      	subs	r7, #2
 8001216:	442b      	add	r3, r5
 8001218:	eba3 0309 	sub.w	r3, r3, r9
 800121c:	fbb3 f0fe 	udiv	r0, r3, lr
 8001220:	fb0e 3310 	mls	r3, lr, r0, r3
 8001224:	fb00 f108 	mul.w	r1, r0, r8
 8001228:	b2a4      	uxth	r4, r4
 800122a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800122e:	42a1      	cmp	r1, r4
 8001230:	d909      	bls.n	8001246 <__udivmoddi4+0x8e>
 8001232:	192c      	adds	r4, r5, r4
 8001234:	f100 33ff 	add.w	r3, r0, #4294967295
 8001238:	f080 8107 	bcs.w	800144a <__udivmoddi4+0x292>
 800123c:	42a1      	cmp	r1, r4
 800123e:	f240 8104 	bls.w	800144a <__udivmoddi4+0x292>
 8001242:	3802      	subs	r0, #2
 8001244:	442c      	add	r4, r5
 8001246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800124a:	2700      	movs	r7, #0
 800124c:	1a64      	subs	r4, r4, r1
 800124e:	b11e      	cbz	r6, 8001258 <__udivmoddi4+0xa0>
 8001250:	2300      	movs	r3, #0
 8001252:	40d4      	lsrs	r4, r2
 8001254:	e9c6 4300 	strd	r4, r3, [r6]
 8001258:	4639      	mov	r1, r7
 800125a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125e:	428b      	cmp	r3, r1
 8001260:	d909      	bls.n	8001276 <__udivmoddi4+0xbe>
 8001262:	2e00      	cmp	r6, #0
 8001264:	f000 80ec 	beq.w	8001440 <__udivmoddi4+0x288>
 8001268:	2700      	movs	r7, #0
 800126a:	e9c6 0100 	strd	r0, r1, [r6]
 800126e:	4638      	mov	r0, r7
 8001270:	4639      	mov	r1, r7
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	fab3 f783 	clz	r7, r3
 800127a:	2f00      	cmp	r7, #0
 800127c:	d148      	bne.n	8001310 <__udivmoddi4+0x158>
 800127e:	428b      	cmp	r3, r1
 8001280:	d302      	bcc.n	8001288 <__udivmoddi4+0xd0>
 8001282:	4282      	cmp	r2, r0
 8001284:	f200 80fb 	bhi.w	800147e <__udivmoddi4+0x2c6>
 8001288:	1a84      	subs	r4, r0, r2
 800128a:	eb61 0303 	sbc.w	r3, r1, r3
 800128e:	2001      	movs	r0, #1
 8001290:	469c      	mov	ip, r3
 8001292:	2e00      	cmp	r6, #0
 8001294:	d0e0      	beq.n	8001258 <__udivmoddi4+0xa0>
 8001296:	e9c6 4c00 	strd	r4, ip, [r6]
 800129a:	e7dd      	b.n	8001258 <__udivmoddi4+0xa0>
 800129c:	b902      	cbnz	r2, 80012a0 <__udivmoddi4+0xe8>
 800129e:	deff      	udf	#255	; 0xff
 80012a0:	fab2 f282 	clz	r2, r2
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	f040 808f 	bne.w	80013c8 <__udivmoddi4+0x210>
 80012aa:	2701      	movs	r7, #1
 80012ac:	1b49      	subs	r1, r1, r5
 80012ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012b2:	fa1f f985 	uxth.w	r9, r5
 80012b6:	fbb1 fef8 	udiv	lr, r1, r8
 80012ba:	fb08 111e 	mls	r1, r8, lr, r1
 80012be:	fb09 f00e 	mul.w	r0, r9, lr
 80012c2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80012c6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80012ca:	4298      	cmp	r0, r3
 80012cc:	d907      	bls.n	80012de <__udivmoddi4+0x126>
 80012ce:	18eb      	adds	r3, r5, r3
 80012d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80012d4:	d202      	bcs.n	80012dc <__udivmoddi4+0x124>
 80012d6:	4298      	cmp	r0, r3
 80012d8:	f200 80cd 	bhi.w	8001476 <__udivmoddi4+0x2be>
 80012dc:	468e      	mov	lr, r1
 80012de:	1a1b      	subs	r3, r3, r0
 80012e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80012e4:	fb08 3310 	mls	r3, r8, r0, r3
 80012e8:	fb09 f900 	mul.w	r9, r9, r0
 80012ec:	b2a4      	uxth	r4, r4
 80012ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012f2:	45a1      	cmp	r9, r4
 80012f4:	d907      	bls.n	8001306 <__udivmoddi4+0x14e>
 80012f6:	192c      	adds	r4, r5, r4
 80012f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80012fc:	d202      	bcs.n	8001304 <__udivmoddi4+0x14c>
 80012fe:	45a1      	cmp	r9, r4
 8001300:	f200 80b6 	bhi.w	8001470 <__udivmoddi4+0x2b8>
 8001304:	4618      	mov	r0, r3
 8001306:	eba4 0409 	sub.w	r4, r4, r9
 800130a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800130e:	e79e      	b.n	800124e <__udivmoddi4+0x96>
 8001310:	f1c7 0520 	rsb	r5, r7, #32
 8001314:	40bb      	lsls	r3, r7
 8001316:	fa22 fc05 	lsr.w	ip, r2, r5
 800131a:	ea4c 0c03 	orr.w	ip, ip, r3
 800131e:	fa21 f405 	lsr.w	r4, r1, r5
 8001322:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001326:	fbb4 f9fe 	udiv	r9, r4, lr
 800132a:	fa1f f88c 	uxth.w	r8, ip
 800132e:	fb0e 4419 	mls	r4, lr, r9, r4
 8001332:	fa20 f305 	lsr.w	r3, r0, r5
 8001336:	40b9      	lsls	r1, r7
 8001338:	fb09 fa08 	mul.w	sl, r9, r8
 800133c:	4319      	orrs	r1, r3
 800133e:	0c0b      	lsrs	r3, r1, #16
 8001340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001344:	45a2      	cmp	sl, r4
 8001346:	fa02 f207 	lsl.w	r2, r2, r7
 800134a:	fa00 f307 	lsl.w	r3, r0, r7
 800134e:	d90b      	bls.n	8001368 <__udivmoddi4+0x1b0>
 8001350:	eb1c 0404 	adds.w	r4, ip, r4
 8001354:	f109 30ff 	add.w	r0, r9, #4294967295
 8001358:	f080 8088 	bcs.w	800146c <__udivmoddi4+0x2b4>
 800135c:	45a2      	cmp	sl, r4
 800135e:	f240 8085 	bls.w	800146c <__udivmoddi4+0x2b4>
 8001362:	f1a9 0902 	sub.w	r9, r9, #2
 8001366:	4464      	add	r4, ip
 8001368:	eba4 040a 	sub.w	r4, r4, sl
 800136c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001370:	fb0e 4410 	mls	r4, lr, r0, r4
 8001374:	fb00 fa08 	mul.w	sl, r0, r8
 8001378:	b289      	uxth	r1, r1
 800137a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800137e:	45a2      	cmp	sl, r4
 8001380:	d908      	bls.n	8001394 <__udivmoddi4+0x1dc>
 8001382:	eb1c 0404 	adds.w	r4, ip, r4
 8001386:	f100 31ff 	add.w	r1, r0, #4294967295
 800138a:	d26b      	bcs.n	8001464 <__udivmoddi4+0x2ac>
 800138c:	45a2      	cmp	sl, r4
 800138e:	d969      	bls.n	8001464 <__udivmoddi4+0x2ac>
 8001390:	3802      	subs	r0, #2
 8001392:	4464      	add	r4, ip
 8001394:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001398:	fba0 8902 	umull	r8, r9, r0, r2
 800139c:	eba4 040a 	sub.w	r4, r4, sl
 80013a0:	454c      	cmp	r4, r9
 80013a2:	4641      	mov	r1, r8
 80013a4:	46ce      	mov	lr, r9
 80013a6:	d354      	bcc.n	8001452 <__udivmoddi4+0x29a>
 80013a8:	d051      	beq.n	800144e <__udivmoddi4+0x296>
 80013aa:	2e00      	cmp	r6, #0
 80013ac:	d069      	beq.n	8001482 <__udivmoddi4+0x2ca>
 80013ae:	1a5a      	subs	r2, r3, r1
 80013b0:	eb64 040e 	sbc.w	r4, r4, lr
 80013b4:	fa04 f505 	lsl.w	r5, r4, r5
 80013b8:	fa22 f307 	lsr.w	r3, r2, r7
 80013bc:	40fc      	lsrs	r4, r7
 80013be:	431d      	orrs	r5, r3
 80013c0:	e9c6 5400 	strd	r5, r4, [r6]
 80013c4:	2700      	movs	r7, #0
 80013c6:	e747      	b.n	8001258 <__udivmoddi4+0xa0>
 80013c8:	4095      	lsls	r5, r2
 80013ca:	f1c2 0320 	rsb	r3, r2, #32
 80013ce:	fa21 f003 	lsr.w	r0, r1, r3
 80013d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80013d6:	fbb0 f7f8 	udiv	r7, r0, r8
 80013da:	fa1f f985 	uxth.w	r9, r5
 80013de:	fb08 0017 	mls	r0, r8, r7, r0
 80013e2:	fa24 f303 	lsr.w	r3, r4, r3
 80013e6:	4091      	lsls	r1, r2
 80013e8:	fb07 fc09 	mul.w	ip, r7, r9
 80013ec:	430b      	orrs	r3, r1
 80013ee:	0c19      	lsrs	r1, r3, #16
 80013f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f4:	458c      	cmp	ip, r1
 80013f6:	fa04 f402 	lsl.w	r4, r4, r2
 80013fa:	d907      	bls.n	800140c <__udivmoddi4+0x254>
 80013fc:	1869      	adds	r1, r5, r1
 80013fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8001402:	d231      	bcs.n	8001468 <__udivmoddi4+0x2b0>
 8001404:	458c      	cmp	ip, r1
 8001406:	d92f      	bls.n	8001468 <__udivmoddi4+0x2b0>
 8001408:	3f02      	subs	r7, #2
 800140a:	4429      	add	r1, r5
 800140c:	eba1 010c 	sub.w	r1, r1, ip
 8001410:	fbb1 f0f8 	udiv	r0, r1, r8
 8001414:	fb08 1c10 	mls	ip, r8, r0, r1
 8001418:	fb00 fe09 	mul.w	lr, r0, r9
 800141c:	b299      	uxth	r1, r3
 800141e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001422:	458e      	cmp	lr, r1
 8001424:	d907      	bls.n	8001436 <__udivmoddi4+0x27e>
 8001426:	1869      	adds	r1, r5, r1
 8001428:	f100 33ff 	add.w	r3, r0, #4294967295
 800142c:	d218      	bcs.n	8001460 <__udivmoddi4+0x2a8>
 800142e:	458e      	cmp	lr, r1
 8001430:	d916      	bls.n	8001460 <__udivmoddi4+0x2a8>
 8001432:	3802      	subs	r0, #2
 8001434:	4429      	add	r1, r5
 8001436:	eba1 010e 	sub.w	r1, r1, lr
 800143a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800143e:	e73a      	b.n	80012b6 <__udivmoddi4+0xfe>
 8001440:	4637      	mov	r7, r6
 8001442:	4630      	mov	r0, r6
 8001444:	e708      	b.n	8001258 <__udivmoddi4+0xa0>
 8001446:	460f      	mov	r7, r1
 8001448:	e6e6      	b.n	8001218 <__udivmoddi4+0x60>
 800144a:	4618      	mov	r0, r3
 800144c:	e6fb      	b.n	8001246 <__udivmoddi4+0x8e>
 800144e:	4543      	cmp	r3, r8
 8001450:	d2ab      	bcs.n	80013aa <__udivmoddi4+0x1f2>
 8001452:	ebb8 0102 	subs.w	r1, r8, r2
 8001456:	eb69 020c 	sbc.w	r2, r9, ip
 800145a:	3801      	subs	r0, #1
 800145c:	4696      	mov	lr, r2
 800145e:	e7a4      	b.n	80013aa <__udivmoddi4+0x1f2>
 8001460:	4618      	mov	r0, r3
 8001462:	e7e8      	b.n	8001436 <__udivmoddi4+0x27e>
 8001464:	4608      	mov	r0, r1
 8001466:	e795      	b.n	8001394 <__udivmoddi4+0x1dc>
 8001468:	4607      	mov	r7, r0
 800146a:	e7cf      	b.n	800140c <__udivmoddi4+0x254>
 800146c:	4681      	mov	r9, r0
 800146e:	e77b      	b.n	8001368 <__udivmoddi4+0x1b0>
 8001470:	3802      	subs	r0, #2
 8001472:	442c      	add	r4, r5
 8001474:	e747      	b.n	8001306 <__udivmoddi4+0x14e>
 8001476:	f1ae 0e02 	sub.w	lr, lr, #2
 800147a:	442b      	add	r3, r5
 800147c:	e72f      	b.n	80012de <__udivmoddi4+0x126>
 800147e:	4638      	mov	r0, r7
 8001480:	e707      	b.n	8001292 <__udivmoddi4+0xda>
 8001482:	4637      	mov	r7, r6
 8001484:	e6e8      	b.n	8001258 <__udivmoddi4+0xa0>
 8001486:	bf00      	nop

08001488 <__aeabi_idiv0>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001492:	f001 f9bf 	bl	8002814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001496:	f000 f975 	bl	8001784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149a:	f000 fbc9 	bl	8001c30 <MX_GPIO_Init>
  MX_TIM3_Init();
 800149e:	f000 faa7 	bl	80019f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014a2:	f000 fb1b 	bl	8001adc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80014a6:	f000 fb99 	bl	8001bdc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80014aa:	f000 f9cb 	bl	8001844 <MX_ADC1_Init>
  MX_CRC_Init();
 80014ae:	f000 fa09 	bl	80018c4 <MX_CRC_Init>
  MX_TIM2_Init();
 80014b2:	f000 fa1b 	bl	80018ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014b6:	2104      	movs	r1, #4
 80014b8:	489f      	ldr	r0, [pc, #636]	; (8001738 <main+0x2ac>)
 80014ba:	f003 f8a5 	bl	8004608 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80014be:	2100      	movs	r1, #0
 80014c0:	489e      	ldr	r0, [pc, #632]	; (800173c <main+0x2b0>)
 80014c2:	f003 f8a1 	bl	8004608 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80014c6:	2104      	movs	r1, #4
 80014c8:	489c      	ldr	r0, [pc, #624]	; (800173c <main+0x2b0>)
 80014ca:	f003 f89d 	bl	8004608 <HAL_TIM_PWM_Start>


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80014ce:	2108      	movs	r1, #8
 80014d0:	489b      	ldr	r0, [pc, #620]	; (8001740 <main+0x2b4>)
 80014d2:	f003 f899 	bl	8004608 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80014d6:	2201      	movs	r2, #1
 80014d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014dc:	4899      	ldr	r0, [pc, #612]	; (8001744 <main+0x2b8>)
 80014de:	f002 f9b4 	bl	800384a <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e8:	4897      	ldr	r0, [pc, #604]	; (8001748 <main+0x2bc>)
 80014ea:	f002 f9ae 	bl	800384a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f4:	4894      	ldr	r0, [pc, #592]	; (8001748 <main+0x2bc>)
 80014f6:	f002 f9a8 	bl	800384a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001500:	4890      	ldr	r0, [pc, #576]	; (8001744 <main+0x2b8>)
 8001502:	f002 f9a2 	bl	800384a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800150c:	488f      	ldr	r0, [pc, #572]	; (800174c <main+0x2c0>)
 800150e:	f002 f99c 	bl	800384a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001518:	488c      	ldr	r0, [pc, #560]	; (800174c <main+0x2c0>)
 800151a:	f002 f996 	bl	800384a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001524:	4889      	ldr	r0, [pc, #548]	; (800174c <main+0x2c0>)
 8001526:	f002 f990 	bl	800384a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	2104      	movs	r1, #4
 800152e:	4887      	ldr	r0, [pc, #540]	; (800174c <main+0x2c0>)
 8001530:	f002 f98b 	bl	800384a <HAL_GPIO_WritePin>
	HAL_ADC_Start_IT(&hadc1);
 8001534:	4886      	ldr	r0, [pc, #536]	; (8001750 <main+0x2c4>)
 8001536:	f001 fac9 	bl	8002acc <HAL_ADC_Start_IT>
	HAL_UART_Transmit_IT(&huart1, txData, 10);
 800153a:	220a      	movs	r2, #10
 800153c:	4985      	ldr	r1, [pc, #532]	; (8001754 <main+0x2c8>)
 800153e:	4886      	ldr	r0, [pc, #536]	; (8001758 <main+0x2cc>)
 8001540:	f003 fd51 	bl	8004fe6 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	4985      	ldr	r1, [pc, #532]	; (800175c <main+0x2d0>)
 8001548:	4883      	ldr	r0, [pc, #524]	; (8001758 <main+0x2cc>)
 800154a:	f003 fd90 	bl	800506e <HAL_UART_Receive_IT>

	for(uint8_t i=0;i<3;i++){
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e031      	b.n	80015b8 <main+0x12c>
		for(uint8_t i=0;i<8;i++){
 8001554:	2300      	movs	r3, #0
 8001556:	73bb      	strb	r3, [r7, #14]
 8001558:	e00f      	b.n	800157a <main+0xee>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001560:	4879      	ldr	r0, [pc, #484]	; (8001748 <main+0x2bc>)
 8001562:	f002 f972 	bl	800384a <HAL_GPIO_WritePin>
			DemuxSelectSet(i);
 8001566:	7bbb      	ldrb	r3, [r7, #14]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fc37 	bl	8001ddc <DemuxSelectSet>
			HAL_Delay(25);
 800156e:	2019      	movs	r0, #25
 8001570:	f001 f9b2 	bl	80028d8 <HAL_Delay>
		for(uint8_t i=0;i<8;i++){
 8001574:	7bbb      	ldrb	r3, [r7, #14]
 8001576:	3301      	adds	r3, #1
 8001578:	73bb      	strb	r3, [r7, #14]
 800157a:	7bbb      	ldrb	r3, [r7, #14]
 800157c:	2b07      	cmp	r3, #7
 800157e:	d9ec      	bls.n	800155a <main+0xce>
		}
		for(uint8_t i=1;i<8;i++){
 8001580:	2301      	movs	r3, #1
 8001582:	737b      	strb	r3, [r7, #13]
 8001584:	e012      	b.n	80015ac <main+0x120>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800158c:	486e      	ldr	r0, [pc, #440]	; (8001748 <main+0x2bc>)
 800158e:	f002 f95c 	bl	800384a <HAL_GPIO_WritePin>
			DemuxSelectSet(7-i);
 8001592:	7b7b      	ldrb	r3, [r7, #13]
 8001594:	f1c3 0307 	rsb	r3, r3, #7
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fc1e 	bl	8001ddc <DemuxSelectSet>
			HAL_Delay(25);
 80015a0:	2019      	movs	r0, #25
 80015a2:	f001 f999 	bl	80028d8 <HAL_Delay>
		for(uint8_t i=1;i<8;i++){
 80015a6:	7b7b      	ldrb	r3, [r7, #13]
 80015a8:	3301      	adds	r3, #1
 80015aa:	737b      	strb	r3, [r7, #13]
 80015ac:	7b7b      	ldrb	r3, [r7, #13]
 80015ae:	2b07      	cmp	r3, #7
 80015b0:	d9e9      	bls.n	8001586 <main+0xfa>
	for(uint8_t i=0;i<3;i++){
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	3301      	adds	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d9ca      	bls.n	8001554 <main+0xc8>
		}
	}

	for(uint32_t i=0;i<5000;i++){
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	e00f      	b.n	80015e4 <main+0x158>
		for(uint8_t i=8;i<13;i++){
 80015c4:	2308      	movs	r3, #8
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	e006      	b.n	80015d8 <main+0x14c>
			DemuxSelectSet(i);
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fc05 	bl	8001ddc <DemuxSelectSet>
		for(uint8_t i=8;i<13;i++){
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	3301      	adds	r3, #1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b0c      	cmp	r3, #12
 80015dc:	d9f5      	bls.n	80015ca <main+0x13e>
	for(uint32_t i=0;i<5000;i++){
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3301      	adds	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f241 3287 	movw	r2, #4999	; 0x1387
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d9ea      	bls.n	80015c4 <main+0x138>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(uartTxFlag){
 80015ee:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <main+0x2d4>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d07d      	beq.n	80016f2 <main+0x266>
			for (uint8_t i = 0; i < 3; i++) {
 80015f6:	2300      	movs	r3, #0
 80015f8:	71bb      	strb	r3, [r7, #6]
 80015fa:	e016      	b.n	800162a <main+0x19e>
				HAL_GPIO_WritePin(GPIOC, outputPins[i], GPIO_PIN_SET);
 80015fc:	79bb      	ldrb	r3, [r7, #6]
 80015fe:	4a59      	ldr	r2, [pc, #356]	; (8001764 <main+0x2d8>)
 8001600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001604:	2201      	movs	r2, #1
 8001606:	4619      	mov	r1, r3
 8001608:	4850      	ldr	r0, [pc, #320]	; (800174c <main+0x2c0>)
 800160a:	f002 f91e 	bl	800384a <HAL_GPIO_WritePin>
				StateOfButtons();
 800160e:	f000 fc4b 	bl	8001ea8 <StateOfButtons>
				HAL_GPIO_WritePin(GPIOC, outputPins[i], GPIO_PIN_RESET);
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	4a53      	ldr	r2, [pc, #332]	; (8001764 <main+0x2d8>)
 8001616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800161a:	2200      	movs	r2, #0
 800161c:	4619      	mov	r1, r3
 800161e:	484b      	ldr	r0, [pc, #300]	; (800174c <main+0x2c0>)
 8001620:	f002 f913 	bl	800384a <HAL_GPIO_WritePin>
			for (uint8_t i = 0; i < 3; i++) {
 8001624:	79bb      	ldrb	r3, [r7, #6]
 8001626:	3301      	adds	r3, #1
 8001628:	71bb      	strb	r3, [r7, #6]
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d9e5      	bls.n	80015fc <main+0x170>
			}
			txData[2] = buttonState;
 8001630:	4b4d      	ldr	r3, [pc, #308]	; (8001768 <main+0x2dc>)
 8001632:	781a      	ldrb	r2, [r3, #0]
 8001634:	4b47      	ldr	r3, [pc, #284]	; (8001754 <main+0x2c8>)
 8001636:	709a      	strb	r2, [r3, #2]
			txData[3] = (uint8_t) (fscale(0, 4035, 0, 255,  Sliders[2],4.5));
 8001638:	4b4c      	ldr	r3, [pc, #304]	; (800176c <main+0x2e0>)
 800163a:	889b      	ldrh	r3, [r3, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fb65 	bl	8000d0c <__aeabi_ui2f>
 8001642:	4602      	mov	r2, r0
 8001644:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <main+0x2e4>)
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	9200      	str	r2, [sp, #0]
 800164a:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <main+0x2e8>)
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4949      	ldr	r1, [pc, #292]	; (8001778 <main+0x2ec>)
 8001652:	f04f 0000 	mov.w	r0, #0
 8001656:	f000 fd77 	bl	8002148 <fscale>
 800165a:	4603      	mov	r3, r0
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fd73 	bl	8001148 <__aeabi_f2uiz>
 8001662:	4603      	mov	r3, r0
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <main+0x2c8>)
 8001668:	70da      	strb	r2, [r3, #3]
			txData[4] = (uint8_t) (map(Sliders[1], 0, 4035, 0, 255));
 800166a:	4b40      	ldr	r3, [pc, #256]	; (800176c <main+0x2e0>)
 800166c:	885b      	ldrh	r3, [r3, #2]
 800166e:	4618      	mov	r0, r3
 8001670:	23ff      	movs	r3, #255	; 0xff
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2300      	movs	r3, #0
 8001676:	f640 72c3 	movw	r2, #4035	; 0xfc3
 800167a:	2100      	movs	r1, #0
 800167c:	f000 fd48 	bl	8002110 <map>
 8001680:	4603      	mov	r3, r0
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <main+0x2c8>)
 8001686:	711a      	strb	r2, [r3, #4]
			txData[5] = (uint8_t) (map(Sliders[0], 0, 4035, 0, 255));
 8001688:	4b38      	ldr	r3, [pc, #224]	; (800176c <main+0x2e0>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	23ff      	movs	r3, #255	; 0xff
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	f640 72c3 	movw	r2, #4035	; 0xfc3
 8001698:	2100      	movs	r1, #0
 800169a:	f000 fd39 	bl	8002110 <map>
 800169e:	4603      	mov	r3, r0
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <main+0x2c8>)
 80016a4:	715a      	strb	r2, [r3, #5]
			byteConverter.var32 = crc32b(txData,6);
 80016a6:	2106      	movs	r1, #6
 80016a8:	482a      	ldr	r0, [pc, #168]	; (8001754 <main+0x2c8>)
 80016aa:	f000 fdf7 	bl	800229c <crc32b>
 80016ae:	4602      	mov	r2, r0
 80016b0:	4b32      	ldr	r3, [pc, #200]	; (800177c <main+0x2f0>)
 80016b2:	601a      	str	r2, [r3, #0]
			txData[6] = byteConverter.var8array[3];
 80016b4:	4b31      	ldr	r3, [pc, #196]	; (800177c <main+0x2f0>)
 80016b6:	78da      	ldrb	r2, [r3, #3]
 80016b8:	4b26      	ldr	r3, [pc, #152]	; (8001754 <main+0x2c8>)
 80016ba:	719a      	strb	r2, [r3, #6]
			txData[7] = byteConverter.var8array[2];
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <main+0x2f0>)
 80016be:	789a      	ldrb	r2, [r3, #2]
 80016c0:	4b24      	ldr	r3, [pc, #144]	; (8001754 <main+0x2c8>)
 80016c2:	71da      	strb	r2, [r3, #7]
			txData[8] = byteConverter.var8array[1];
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <main+0x2f0>)
 80016c6:	785a      	ldrb	r2, [r3, #1]
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <main+0x2c8>)
 80016ca:	721a      	strb	r2, [r3, #8]
			txData[9] = byteConverter.var8array[0];
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <main+0x2f0>)
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <main+0x2c8>)
 80016d2:	725a      	strb	r2, [r3, #9]
			Led = ((uint16_t)(rxData<<8)) | buttonState;
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <main+0x2d0>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4b22      	ldr	r3, [pc, #136]	; (8001768 <main+0x2dc>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	4b25      	ldr	r3, [pc, #148]	; (8001780 <main+0x2f4>)
 80016ea:	801a      	strh	r2, [r3, #0]
			uartTxFlag=0;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <main+0x2d4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
		}
		for (uint8_t ledCount = 0; ledCount < 13; ledCount++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	717b      	strb	r3, [r7, #5]
 80016f6:	e015      	b.n	8001724 <main+0x298>
			if ((Led & (1 << ledCount)) == (1 << ledCount)) {
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <main+0x2f4>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	797b      	ldrb	r3, [r7, #5]
 8001700:	2201      	movs	r2, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	ea01 0203 	and.w	r2, r1, r3
 800170a:	797b      	ldrb	r3, [r7, #5]
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	429a      	cmp	r2, r3
 8001714:	d103      	bne.n	800171e <main+0x292>
				DemuxSelectSet(ledCount);
 8001716:	797b      	ldrb	r3, [r7, #5]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fb5f 	bl	8001ddc <DemuxSelectSet>
		for (uint8_t ledCount = 0; ledCount < 13; ledCount++) {
 800171e:	797b      	ldrb	r3, [r7, #5]
 8001720:	3301      	adds	r3, #1
 8001722:	717b      	strb	r3, [r7, #5]
 8001724:	797b      	ldrb	r3, [r7, #5]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d9e6      	bls.n	80016f8 <main+0x26c>
			}
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <main+0x2bc>)
 8001732:	f002 f88a 	bl	800384a <HAL_GPIO_WritePin>
		if(uartTxFlag){
 8001736:	e75a      	b.n	80015ee <main+0x162>
 8001738:	20000108 	.word	0x20000108
 800173c:	200000c0 	.word	0x200000c0
 8001740:	200001bc 	.word	0x200001bc
 8001744:	40010c00 	.word	0x40010c00
 8001748:	40010800 	.word	0x40010800
 800174c:	40011000 	.word	0x40011000
 8001750:	20000148 	.word	0x20000148
 8001754:	20000000 	.word	0x20000000
 8001758:	20000178 	.word	0x20000178
 800175c:	200000b0 	.word	0x200000b0
 8001760:	200000bb 	.word	0x200000bb
 8001764:	2000000c 	.word	0x2000000c
 8001768:	200000bc 	.word	0x200000bc
 800176c:	200000b4 	.word	0x200000b4
 8001770:	40900000 	.word	0x40900000
 8001774:	437f0000 	.word	0x437f0000
 8001778:	457c3000 	.word	0x457c3000
 800177c:	200001b8 	.word	0x200001b8
 8001780:	200000b2 	.word	0x200000b2

08001784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b09c      	sub	sp, #112	; 0x70
 8001788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800178e:	2238      	movs	r2, #56	; 0x38
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f003 ffe2 	bl	800575c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2220      	movs	r2, #32
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 ffd4 	bl	800575c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b4:	2302      	movs	r3, #2
 80017b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b8:	2301      	movs	r3, #1
 80017ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017bc:	2310      	movs	r3, #16
 80017be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c4:	2302      	movs	r3, #2
 80017c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80017c8:	2300      	movs	r3, #0
 80017ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80017cc:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80017d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 f84e 	bl	800387c <HAL_RCC_OscConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017e6:	f000 fd91 	bl	800230c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ea:	230f      	movs	r3, #15
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ee:	2302      	movs	r3, #2
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80017fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001804:	2101      	movs	r1, #1
 8001806:	4618      	mov	r0, r3
 8001808:	f002 fb4e 	bl	8003ea8 <HAL_RCC_ClockConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001812:	f000 fd7b 	bl	800230c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001816:	2302      	movs	r3, #2
 8001818:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fd5f 	bl	80042e4 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800182c:	f000 fd6e 	bl	800230c <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <SystemClock_Config+0xbc>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]
}
 8001836:	bf00      	nop
 8001838:	3770      	adds	r7, #112	; 0x70
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	42420070 	.word	0x42420070

08001844 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_ADC1_Init+0x78>)
 8001856:	4a1a      	ldr	r2, [pc, #104]	; (80018c0 <MX_ADC1_Init+0x7c>)
 8001858:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_ADC1_Init+0x78>)
 800185c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001860:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_ADC1_Init+0x78>)
 8001864:	2201      	movs	r2, #1
 8001866:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_ADC1_Init+0x78>)
 800186a:	2200      	movs	r2, #0
 800186c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <MX_ADC1_Init+0x78>)
 8001870:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001874:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_ADC1_Init+0x78>)
 8001878:	2200      	movs	r2, #0
 800187a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_ADC1_Init+0x78>)
 800187e:	2201      	movs	r2, #1
 8001880:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001882:	480e      	ldr	r0, [pc, #56]	; (80018bc <MX_ADC1_Init+0x78>)
 8001884:	f001 f84a 	bl	800291c <HAL_ADC_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800188e:	f000 fd3d 	bl	800230c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001892:	230f      	movs	r3, #15
 8001894:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001896:	2301      	movs	r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800189a:	2307      	movs	r3, #7
 800189c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <MX_ADC1_Init+0x78>)
 80018a4:	f001 faa0 	bl	8002de8 <HAL_ADC_ConfigChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80018ae:	f000 fd2d 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000148 	.word	0x20000148
 80018c0:	40012400 	.word	0x40012400

080018c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_CRC_Init+0x20>)
 80018ca:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <MX_CRC_Init+0x24>)
 80018cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_CRC_Init+0x20>)
 80018d0:	f001 fd25 	bl	800331e <HAL_CRC_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80018da:	f000 fd17 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000100 	.word	0x20000100
 80018e8:	40023000 	.word	0x40023000

080018ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08e      	sub	sp, #56	; 0x38
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	f107 0320 	add.w	r3, r7, #32
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	615a      	str	r2, [r3, #20]
 800191a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800191c:	4b33      	ldr	r3, [pc, #204]	; (80019ec <MX_TIM2_Init+0x100>)
 800191e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001922:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001924:	4b31      	ldr	r3, [pc, #196]	; (80019ec <MX_TIM2_Init+0x100>)
 8001926:	2200      	movs	r2, #0
 8001928:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b30      	ldr	r3, [pc, #192]	; (80019ec <MX_TIM2_Init+0x100>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001930:	4b2e      	ldr	r3, [pc, #184]	; (80019ec <MX_TIM2_Init+0x100>)
 8001932:	22ff      	movs	r2, #255	; 0xff
 8001934:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <MX_TIM2_Init+0x100>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193c:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <MX_TIM2_Init+0x100>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001942:	482a      	ldr	r0, [pc, #168]	; (80019ec <MX_TIM2_Init+0x100>)
 8001944:	f002 fe00 	bl	8004548 <HAL_TIM_Base_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800194e:	f000 fcdd 	bl	800230c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001958:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195c:	4619      	mov	r1, r3
 800195e:	4823      	ldr	r0, [pc, #140]	; (80019ec <MX_TIM2_Init+0x100>)
 8001960:	f002 ff4a 	bl	80047f8 <HAL_TIM_ConfigClockSource>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800196a:	f000 fccf 	bl	800230c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800196e:	481f      	ldr	r0, [pc, #124]	; (80019ec <MX_TIM2_Init+0x100>)
 8001970:	f002 fe15 	bl	800459e <HAL_TIM_PWM_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800197a:	f000 fcc7 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001986:	f107 0320 	add.w	r3, r7, #32
 800198a:	4619      	mov	r1, r3
 800198c:	4817      	ldr	r0, [pc, #92]	; (80019ec <MX_TIM2_Init+0x100>)
 800198e:	f003 fa99 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001998:	f000 fcb8 	bl	800230c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800199c:	2360      	movs	r3, #96	; 0x60
 800199e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 128;
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	2208      	movs	r2, #8
 80019b0:	4619      	mov	r1, r3
 80019b2:	480e      	ldr	r0, [pc, #56]	; (80019ec <MX_TIM2_Init+0x100>)
 80019b4:	f002 fe5a 	bl	800466c <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80019be:	f000 fca5 	bl	800230c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	220c      	movs	r2, #12
 80019ca:	4619      	mov	r1, r3
 80019cc:	4807      	ldr	r0, [pc, #28]	; (80019ec <MX_TIM2_Init+0x100>)
 80019ce:	f002 fe4d 	bl	800466c <HAL_TIM_PWM_ConfigChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80019d8:	f000 fc98 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <MX_TIM2_Init+0x100>)
 80019de:	f000 fd8b 	bl	80024f8 <HAL_TIM_MspPostInit>

}
 80019e2:	bf00      	nop
 80019e4:	3738      	adds	r7, #56	; 0x38
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200001bc 	.word	0x200001bc

080019f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08e      	sub	sp, #56	; 0x38
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	f107 0320 	add.w	r3, r7, #32
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
 8001a1c:	615a      	str	r2, [r3, #20]
 8001a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a20:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a22:	4a2d      	ldr	r2, [pc, #180]	; (8001ad8 <MX_TIM3_Init+0xe8>)
 8001a24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a28:	2210      	movs	r2, #16
 8001a2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001a32:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a34:	22ff      	movs	r2, #255	; 0xff
 8001a36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a38:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a44:	4823      	ldr	r0, [pc, #140]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a46:	f002 fd7f 	bl	8004548 <HAL_TIM_Base_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001a50:	f000 fc5c 	bl	800230c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5e:	4619      	mov	r1, r3
 8001a60:	481c      	ldr	r0, [pc, #112]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a62:	f002 fec9 	bl	80047f8 <HAL_TIM_ConfigClockSource>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001a6c:	f000 fc4e 	bl	800230c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a70:	4818      	ldr	r0, [pc, #96]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a72:	f002 fd94 	bl	800459e <HAL_TIM_PWM_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001a7c:	f000 fc46 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a88:	f107 0320 	add.w	r3, r7, #32
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4811      	ldr	r0, [pc, #68]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a90:	f003 fa18 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001a9a:	f000 fc37 	bl	800230c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a9e:	2360      	movs	r3, #96	; 0x60
 8001aa0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 8001aa2:	23ff      	movs	r3, #255	; 0xff
 8001aa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001ab6:	f002 fdd9 	bl	800466c <HAL_TIM_PWM_ConfigChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001ac0:	f000 fc24 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001ac6:	f000 fd17 	bl	80024f8 <HAL_TIM_MspPostInit>

}
 8001aca:	bf00      	nop
 8001acc:	3738      	adds	r7, #56	; 0x38
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000108 	.word	0x20000108
 8001ad8:	40000400 	.word	0x40000400

08001adc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08e      	sub	sp, #56	; 0x38
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	f107 0320 	add.w	r3, r7, #32
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
 8001b08:	615a      	str	r2, [r3, #20]
 8001b0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b0c:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <MX_TIM4_Init+0xf8>)
 8001b0e:	4a32      	ldr	r2, [pc, #200]	; (8001bd8 <MX_TIM4_Init+0xfc>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 8001b12:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <MX_TIM4_Init+0xf8>)
 8001b14:	2210      	movs	r2, #16
 8001b16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <MX_TIM4_Init+0xf8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <MX_TIM4_Init+0xf8>)
 8001b20:	22ff      	movs	r2, #255	; 0xff
 8001b22:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <MX_TIM4_Init+0xf8>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <MX_TIM4_Init+0xf8>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b30:	4828      	ldr	r0, [pc, #160]	; (8001bd4 <MX_TIM4_Init+0xf8>)
 8001b32:	f002 fd09 	bl	8004548 <HAL_TIM_Base_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001b3c:	f000 fbe6 	bl	800230c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4821      	ldr	r0, [pc, #132]	; (8001bd4 <MX_TIM4_Init+0xf8>)
 8001b4e:	f002 fe53 	bl	80047f8 <HAL_TIM_ConfigClockSource>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001b58:	f000 fbd8 	bl	800230c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b5c:	481d      	ldr	r0, [pc, #116]	; (8001bd4 <MX_TIM4_Init+0xf8>)
 8001b5e:	f002 fd1e 	bl	800459e <HAL_TIM_PWM_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001b68:	f000 fbd0 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b74:	f107 0320 	add.w	r3, r7, #32
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4816      	ldr	r0, [pc, #88]	; (8001bd4 <MX_TIM4_Init+0xf8>)
 8001b7c:	f003 f9a2 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001b86:	f000 fbc1 	bl	800230c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8a:	2360      	movs	r3, #96	; 0x60
 8001b8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 8001b8e:	23ff      	movs	r3, #255	; 0xff
 8001b90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <MX_TIM4_Init+0xf8>)
 8001ba2:	f002 fd63 	bl	800466c <HAL_TIM_PWM_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001bac:	f000 fbae 	bl	800230c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <MX_TIM4_Init+0xf8>)
 8001bb8:	f002 fd58 	bl	800466c <HAL_TIM_PWM_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8001bc2:	f000 fba3 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001bc6:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <MX_TIM4_Init+0xf8>)
 8001bc8:	f000 fc96 	bl	80024f8 <HAL_TIM_MspPostInit>

}
 8001bcc:	bf00      	nop
 8001bce:	3738      	adds	r7, #56	; 0x38
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200000c0 	.word	0x200000c0
 8001bd8:	40000800 	.word	0x40000800

08001bdc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <MX_USART1_UART_Init+0x50>)
 8001be4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001c02:	220c      	movs	r2, #12
 8001c04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001c14:	f003 f99a 	bl	8004f4c <HAL_UART_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c1e:	f000 fb75 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000178 	.word	0x20000178
 8001c2c:	40013800 	.word	0x40013800

08001c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c44:	4b4e      	ldr	r3, [pc, #312]	; (8001d80 <MX_GPIO_Init+0x150>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a4d      	ldr	r2, [pc, #308]	; (8001d80 <MX_GPIO_Init+0x150>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b4b      	ldr	r3, [pc, #300]	; (8001d80 <MX_GPIO_Init+0x150>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <MX_GPIO_Init+0x150>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a47      	ldr	r2, [pc, #284]	; (8001d80 <MX_GPIO_Init+0x150>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b45      	ldr	r3, [pc, #276]	; (8001d80 <MX_GPIO_Init+0x150>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <MX_GPIO_Init+0x150>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a41      	ldr	r2, [pc, #260]	; (8001d80 <MX_GPIO_Init+0x150>)
 8001c7a:	f043 0308 	orr.w	r3, r3, #8
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <MX_GPIO_Init+0x150>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8c:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <MX_GPIO_Init+0x150>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a3b      	ldr	r2, [pc, #236]	; (8001d80 <MX_GPIO_Init+0x150>)
 8001c92:	f043 0320 	orr.w	r3, r3, #32
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <MX_GPIO_Init+0x150>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8001caa:	4836      	ldr	r0, [pc, #216]	; (8001d84 <MX_GPIO_Init+0x154>)
 8001cac:	f001 fdcd 	bl	800384a <HAL_GPIO_WritePin>
                          |Demux_S4_Pin|Demux_S3_Pin|Demux_S2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001cb6:	4834      	ldr	r0, [pc, #208]	; (8001d88 <MX_GPIO_Init+0x158>)
 8001cb8:	f001 fdc7 	bl	800384a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Demux_VCC_Pin|Demux_GND_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001cc2:	4832      	ldr	r0, [pc, #200]	; (8001d8c <MX_GPIO_Init+0x15c>)
 8001cc4:	f001 fdc1 	bl	800384a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Demux_S1_GPIO_Port, Demux_S1_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2104      	movs	r1, #4
 8001ccc:	4830      	ldr	r0, [pc, #192]	; (8001d90 <MX_GPIO_Init+0x160>)
 8001cce:	f001 fdbc 	bl	800384a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           Demux_S4_Pin Demux_S3_Pin Demux_S2_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 8001cd2:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001cd6:	613b      	str	r3, [r7, #16]
                          |Demux_S4_Pin|Demux_S3_Pin|Demux_S2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4826      	ldr	r0, [pc, #152]	; (8001d84 <MX_GPIO_Init+0x154>)
 8001cec:	f001 fc3c 	bl	8003568 <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN1_Pin COLUMN2_Pin COLUMN3_Pin COLUMN4_Pin */
  GPIO_InitStruct.Pin = COLUMN1_Pin|COLUMN2_Pin|COLUMN3_Pin|COLUMN4_Pin;
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	4619      	mov	r1, r3
 8001d02:	4822      	ldr	r0, [pc, #136]	; (8001d8c <MX_GPIO_Init+0x15c>)
 8001d04:	f001 fc30 	bl	8003568 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	4619      	mov	r1, r3
 8001d1a:	481b      	ldr	r0, [pc, #108]	; (8001d88 <MX_GPIO_Init+0x158>)
 8001d1c:	f001 fc24 	bl	8003568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d20:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	4619      	mov	r1, r3
 8001d38:	4813      	ldr	r0, [pc, #76]	; (8001d88 <MX_GPIO_Init+0x158>)
 8001d3a:	f001 fc15 	bl	8003568 <HAL_GPIO_Init>

  /*Configure GPIO pins : Demux_VCC_Pin Demux_GND_Pin */
  GPIO_InitStruct.Pin = Demux_VCC_Pin|Demux_GND_Pin;
 8001d3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	4619      	mov	r1, r3
 8001d56:	480d      	ldr	r0, [pc, #52]	; (8001d8c <MX_GPIO_Init+0x15c>)
 8001d58:	f001 fc06 	bl	8003568 <HAL_GPIO_Init>

  /*Configure GPIO pin : Demux_S1_Pin */
  GPIO_InitStruct.Pin = Demux_S1_Pin;
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Demux_S1_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4619      	mov	r1, r3
 8001d72:	4807      	ldr	r0, [pc, #28]	; (8001d90 <MX_GPIO_Init+0x160>)
 8001d74:	f001 fbf8 	bl	8003568 <HAL_GPIO_Init>

}
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40011000 	.word	0x40011000
 8001d88:	40010c00 	.word	0x40010c00
 8001d8c:	40010800 	.word	0x40010800
 8001d90:	40011400 	.word	0x40011400

08001d94 <RGBvalue>:

/* USER CODE BEGIN 4 */
void RGBvalue(uint8_t red, uint8_t green, uint8_t blue) {
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	4613      	mov	r3, r2
 8001da4:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 255 - blue);
 8001da6:	797b      	ldrb	r3, [r7, #5]
 8001da8:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <RGBvalue+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 255 - green);
 8001db2:	79bb      	ldrb	r3, [r7, #6]
 8001db4:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <RGBvalue+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 255 - red);
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <RGBvalue+0x44>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	200000c0 	.word	0x200000c0
 8001dd8:	20000108 	.word	0x20000108

08001ddc <DemuxSelectSet>:

void DemuxSelectSet(uint8_t fourBits) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dec:	482b      	ldr	r0, [pc, #172]	; (8001e9c <DemuxSelectSet+0xc0>)
 8001dee:	f001 fd2c 	bl	800384a <HAL_GPIO_WritePin>
	if (((fourBits) & 1) == 1) {
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <DemuxSelectSet+0x2c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2104      	movs	r1, #4
 8001e00:	4827      	ldr	r0, [pc, #156]	; (8001ea0 <DemuxSelectSet+0xc4>)
 8001e02:	f001 fd22 	bl	800384a <HAL_GPIO_WritePin>
 8001e06:	e004      	b.n	8001e12 <DemuxSelectSet+0x36>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	4824      	ldr	r0, [pc, #144]	; (8001ea0 <DemuxSelectSet+0xc4>)
 8001e0e:	f001 fd1c 	bl	800384a <HAL_GPIO_WritePin>
	}

	if (((fourBits) & 2) == 2) {
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <DemuxSelectSet+0x4e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e22:	4820      	ldr	r0, [pc, #128]	; (8001ea4 <DemuxSelectSet+0xc8>)
 8001e24:	f001 fd11 	bl	800384a <HAL_GPIO_WritePin>
 8001e28:	e005      	b.n	8001e36 <DemuxSelectSet+0x5a>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e30:	481c      	ldr	r0, [pc, #112]	; (8001ea4 <DemuxSelectSet+0xc8>)
 8001e32:	f001 fd0a 	bl	800384a <HAL_GPIO_WritePin>
	}

	if (((fourBits) & 4) == 4) {
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <DemuxSelectSet+0x72>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001e40:	2201      	movs	r2, #1
 8001e42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e46:	4817      	ldr	r0, [pc, #92]	; (8001ea4 <DemuxSelectSet+0xc8>)
 8001e48:	f001 fcff 	bl	800384a <HAL_GPIO_WritePin>
 8001e4c:	e005      	b.n	8001e5a <DemuxSelectSet+0x7e>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e54:	4813      	ldr	r0, [pc, #76]	; (8001ea4 <DemuxSelectSet+0xc8>)
 8001e56:	f001 fcf8 	bl	800384a <HAL_GPIO_WritePin>
	}

	if (((fourBits) & 8) == 8) {
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <DemuxSelectSet+0x96>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001e64:	2201      	movs	r2, #1
 8001e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6a:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <DemuxSelectSet+0xc8>)
 8001e6c:	f001 fced 	bl	800384a <HAL_GPIO_WritePin>
 8001e70:	e005      	b.n	8001e7e <DemuxSelectSet+0xa2>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e78:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <DemuxSelectSet+0xc8>)
 8001e7a:	f001 fce6 	bl	800384a <HAL_GPIO_WritePin>
	}
	RGBvalue(246, 28, 163);
 8001e7e:	22a3      	movs	r2, #163	; 0xa3
 8001e80:	211c      	movs	r1, #28
 8001e82:	20f6      	movs	r0, #246	; 0xf6
 8001e84:	f7ff ff86 	bl	8001d94 <RGBvalue>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e8e:	4803      	ldr	r0, [pc, #12]	; (8001e9c <DemuxSelectSet+0xc0>)
 8001e90:	f001 fcdb 	bl	800384a <HAL_GPIO_WritePin>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40010800 	.word	0x40010800
 8001ea0:	40011400 	.word	0x40011400
 8001ea4:	40011000 	.word	0x40011000

08001ea8 <StateOfButtons>:

void StateOfButtons(void) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET) {
 8001eac:	2101      	movs	r1, #1
 8001eae:	4863      	ldr	r0, [pc, #396]	; (800203c <StateOfButtons+0x194>)
 8001eb0:	f001 fcb4 	bl	800381c <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d141      	bne.n	8001f3e <StateOfButtons+0x96>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8001eba:	2101      	movs	r1, #1
 8001ebc:	4860      	ldr	r0, [pc, #384]	; (8002040 <StateOfButtons+0x198>)
 8001ebe:	f001 fcad 	bl	800381c <HAL_GPIO_ReadPin>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d107      	bne.n	8001ed8 <StateOfButtons+0x30>
			buttonState |= (1 << 0);
 8001ec8:	4b5e      	ldr	r3, [pc, #376]	; (8002044 <StateOfButtons+0x19c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b5c      	ldr	r3, [pc, #368]	; (8002044 <StateOfButtons+0x19c>)
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	e006      	b.n	8001ee6 <StateOfButtons+0x3e>
		} else {
			buttonState &= (~(1 << 0));
 8001ed8:	4b5a      	ldr	r3, [pc, #360]	; (8002044 <StateOfButtons+0x19c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4b58      	ldr	r3, [pc, #352]	; (8002044 <StateOfButtons+0x19c>)
 8001ee4:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET) {
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	4855      	ldr	r0, [pc, #340]	; (8002040 <StateOfButtons+0x198>)
 8001eea:	f001 fc97 	bl	800381c <HAL_GPIO_ReadPin>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d107      	bne.n	8001f04 <StateOfButtons+0x5c>
			buttonState |= (1 << 1);
 8001ef4:	4b53      	ldr	r3, [pc, #332]	; (8002044 <StateOfButtons+0x19c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b51      	ldr	r3, [pc, #324]	; (8002044 <StateOfButtons+0x19c>)
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e006      	b.n	8001f12 <StateOfButtons+0x6a>
		} else {
			buttonState &= (~(1 << 1));
 8001f04:	4b4f      	ldr	r3, [pc, #316]	; (8002044 <StateOfButtons+0x19c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	f023 0302 	bic.w	r3, r3, #2
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b4d      	ldr	r3, [pc, #308]	; (8002044 <StateOfButtons+0x19c>)
 8001f10:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
 8001f12:	2104      	movs	r1, #4
 8001f14:	484a      	ldr	r0, [pc, #296]	; (8002040 <StateOfButtons+0x198>)
 8001f16:	f001 fc81 	bl	800381c <HAL_GPIO_ReadPin>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d107      	bne.n	8001f30 <StateOfButtons+0x88>
			buttonState |= (1 << 2);
 8001f20:	4b48      	ldr	r3, [pc, #288]	; (8002044 <StateOfButtons+0x19c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4b46      	ldr	r3, [pc, #280]	; (8002044 <StateOfButtons+0x19c>)
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	e006      	b.n	8001f3e <StateOfButtons+0x96>
		} else {
			buttonState &= (~(1 << 2));
 8001f30:	4b44      	ldr	r3, [pc, #272]	; (8002044 <StateOfButtons+0x19c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b42      	ldr	r3, [pc, #264]	; (8002044 <StateOfButtons+0x19c>)
 8001f3c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 8001f3e:	2102      	movs	r1, #2
 8001f40:	483e      	ldr	r0, [pc, #248]	; (800203c <StateOfButtons+0x194>)
 8001f42:	f001 fc6b 	bl	800381c <HAL_GPIO_ReadPin>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d141      	bne.n	8001fd0 <StateOfButtons+0x128>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	483c      	ldr	r0, [pc, #240]	; (8002040 <StateOfButtons+0x198>)
 8001f50:	f001 fc64 	bl	800381c <HAL_GPIO_ReadPin>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d107      	bne.n	8001f6a <StateOfButtons+0xc2>
			buttonState |= (1 << 3);
 8001f5a:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <StateOfButtons+0x19c>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	f043 0308 	orr.w	r3, r3, #8
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b37      	ldr	r3, [pc, #220]	; (8002044 <StateOfButtons+0x19c>)
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e006      	b.n	8001f78 <StateOfButtons+0xd0>
		} else {
			buttonState &= (~(1 << 3));
 8001f6a:	4b36      	ldr	r3, [pc, #216]	; (8002044 <StateOfButtons+0x19c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f023 0308 	bic.w	r3, r3, #8
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b33      	ldr	r3, [pc, #204]	; (8002044 <StateOfButtons+0x19c>)
 8001f76:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET) {
 8001f78:	2102      	movs	r1, #2
 8001f7a:	4831      	ldr	r0, [pc, #196]	; (8002040 <StateOfButtons+0x198>)
 8001f7c:	f001 fc4e 	bl	800381c <HAL_GPIO_ReadPin>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d107      	bne.n	8001f96 <StateOfButtons+0xee>
			buttonState |= (1 << 4);
 8001f86:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <StateOfButtons+0x19c>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <StateOfButtons+0x19c>)
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	e006      	b.n	8001fa4 <StateOfButtons+0xfc>
		} else {
			buttonState &= (~(1 << 4));
 8001f96:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <StateOfButtons+0x19c>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	f023 0310 	bic.w	r3, r3, #16
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <StateOfButtons+0x19c>)
 8001fa2:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
 8001fa4:	2104      	movs	r1, #4
 8001fa6:	4826      	ldr	r0, [pc, #152]	; (8002040 <StateOfButtons+0x198>)
 8001fa8:	f001 fc38 	bl	800381c <HAL_GPIO_ReadPin>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <StateOfButtons+0x11a>
			buttonState |= (1 << 5);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <StateOfButtons+0x19c>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	f043 0320 	orr.w	r3, r3, #32
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b21      	ldr	r3, [pc, #132]	; (8002044 <StateOfButtons+0x19c>)
 8001fbe:	701a      	strb	r2, [r3, #0]
 8001fc0:	e006      	b.n	8001fd0 <StateOfButtons+0x128>
		} else {
			buttonState &= (~(1 << 5));
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <StateOfButtons+0x19c>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	f023 0320 	bic.w	r3, r3, #32
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <StateOfButtons+0x19c>)
 8001fce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_SET) {
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	481a      	ldr	r0, [pc, #104]	; (800203c <StateOfButtons+0x194>)
 8001fd4:	f001 fc22 	bl	800381c <HAL_GPIO_ReadPin>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d12b      	bne.n	8002036 <StateOfButtons+0x18e>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4817      	ldr	r0, [pc, #92]	; (8002040 <StateOfButtons+0x198>)
 8001fe2:	f001 fc1b 	bl	800381c <HAL_GPIO_ReadPin>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d107      	bne.n	8001ffc <StateOfButtons+0x154>
			buttonState |= (1 << 6);
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <StateOfButtons+0x19c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <StateOfButtons+0x19c>)
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e006      	b.n	800200a <StateOfButtons+0x162>
		} else {
			buttonState &= (~(1 << 6));
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <StateOfButtons+0x19c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <StateOfButtons+0x19c>)
 8002008:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET) {
 800200a:	2102      	movs	r1, #2
 800200c:	480c      	ldr	r0, [pc, #48]	; (8002040 <StateOfButtons+0x198>)
 800200e:	f001 fc05 	bl	800381c <HAL_GPIO_ReadPin>
 8002012:	4603      	mov	r3, r0
 8002014:	2b01      	cmp	r3, #1
 8002016:	d107      	bne.n	8002028 <StateOfButtons+0x180>
			buttonState |= (1 << 7);
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <StateOfButtons+0x19c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <StateOfButtons+0x19c>)
 8002024:	701a      	strb	r2, [r3, #0]
		} else {
			buttonState &= (~(1 << 7));
		}
	}

}
 8002026:	e006      	b.n	8002036 <StateOfButtons+0x18e>
			buttonState &= (~(1 << 7));
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <StateOfButtons+0x19c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <StateOfButtons+0x19c>)
 8002034:	701a      	strb	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40011000 	.word	0x40011000
 8002040:	40010800 	.word	0x40010800
 8002044:	200000bc 	.word	0x200000bc

08002048 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	uartTxFlag=1;
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_UART_TxCpltCallback+0x20>)
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, txData, 10);
 8002056:	220a      	movs	r2, #10
 8002058:	4904      	ldr	r1, [pc, #16]	; (800206c <HAL_UART_TxCpltCallback+0x24>)
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <HAL_UART_TxCpltCallback+0x28>)
 800205c:	f002 ffc3 	bl	8004fe6 <HAL_UART_Transmit_IT>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200000bb 	.word	0x200000bb
 800206c:	20000000 	.word	0x20000000
 8002070:	20000178 	.word	0x20000178

08002074 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);
	/* NOTE : This function should not be modified. When the callback is needed,
	 function HAL_ADC_ConvCpltCallback must be implemented in the user file.
	 */

	Sliders[cnt++] = HAL_ADC_GetValue(hadc);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fddb 	bl	8002c38 <HAL_ADC_GetValue>
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <HAL_ADC_ConvCpltCallback+0x68>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	b2d1      	uxtb	r1, r2
 800208a:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_ADC_ConvCpltCallback+0x68>)
 800208c:	7011      	strb	r1, [r2, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	b281      	uxth	r1, r0
 8002092:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002094:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if (cnt == 3) cnt = 0;
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_ADC_ConvCpltCallback+0x68>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d102      	bne.n	80020a6 <HAL_ADC_ConvCpltCallback+0x32>
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_ADC_ConvCpltCallback+0x68>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80020b6:	2307      	movs	r3, #7
 80020b8:	617b      	str	r3, [r7, #20]
	sConfig.Channel = adcChannel[cnt];
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_ADC_ConvCpltCallback+0x68>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_ADC_ConvCpltCallback+0x70>)
 80020c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c6:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	4619      	mov	r1, r3
 80020ce:	4806      	ldr	r0, [pc, #24]	; (80020e8 <HAL_ADC_ConvCpltCallback+0x74>)
 80020d0:	f000 fe8a 	bl	8002de8 <HAL_ADC_ConfigChannel>
}
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200000ba 	.word	0x200000ba
 80020e0:	200000b4 	.word	0x200000b4
 80020e4:	20000014 	.word	0x20000014
 80020e8:	20000148 	.word	0x20000148

080020ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80020f4:	2201      	movs	r2, #1
 80020f6:	4904      	ldr	r1, [pc, #16]	; (8002108 <HAL_UART_RxCpltCallback+0x1c>)
 80020f8:	4804      	ldr	r0, [pc, #16]	; (800210c <HAL_UART_RxCpltCallback+0x20>)
 80020fa:	f002 ffb8 	bl	800506e <HAL_UART_Receive_IT>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200000b0 	.word	0x200000b0
 800210c:	20000178 	.word	0x20000178

08002110 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	69b9      	ldr	r1, [r7, #24]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	1a8a      	subs	r2, r1, r2
 800212a:	fb02 f203 	mul.w	r2, r2, r3
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	1acb      	subs	r3, r1, r3
 8002134:	fb92 f2f3 	sdiv	r2, r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4413      	add	r3, r2
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
	...

08002148 <fscale>:

float fscale( float originalMin, float originalMax, float newBegin, float newEnd, float inputValue, float curve){
 8002148:	b5b0      	push	{r4, r5, r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  float OriginalRange = 0;
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
  float NewRange = 0;
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
  float zeroRefCurVal = 0;
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
  float normalizedCurVal = 0;
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  float rangedValue = 0;
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  // condition curve parameter
  // limit range
  if (curve > 10) curve = 10;
 8002174:	4946      	ldr	r1, [pc, #280]	; (8002290 <fscale+0x148>)
 8002176:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002178:	f7fe ffdc 	bl	8001134 <__aeabi_fcmpgt>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <fscale+0x3e>
 8002182:	4b43      	ldr	r3, [pc, #268]	; (8002290 <fscale+0x148>)
 8002184:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (curve < -10) curve = -10;
 8002186:	4943      	ldr	r1, [pc, #268]	; (8002294 <fscale+0x14c>)
 8002188:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800218a:	f7fe ffb5 	bl	80010f8 <__aeabi_fcmplt>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <fscale+0x50>
 8002194:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <fscale+0x14c>)
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
  curve = (curve * -.1) ; // - invert and scale - this seems more intuitive - postive numbers give more weight to high end on output
 8002198:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800219a:	f7fe f9a9 	bl	80004f0 <__aeabi_f2d>
 800219e:	a33a      	add	r3, pc, #232	; (adr r3, 8002288 <fscale+0x140>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe f9fc 	bl	80005a0 <__aeabi_dmul>
 80021a8:	4603      	mov	r3, r0
 80021aa:	460c      	mov	r4, r1
 80021ac:	4618      	mov	r0, r3
 80021ae:	4621      	mov	r1, r4
 80021b0:	f7fe fca6 	bl	8000b00 <__aeabi_d2f>
 80021b4:	4603      	mov	r3, r0
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  curve = pow(10, curve); // convert linear scale into lograthimic exponent for other pow function
 80021b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80021ba:	f7fe f999 	bl	80004f0 <__aeabi_f2d>
 80021be:	4603      	mov	r3, r0
 80021c0:	460c      	mov	r4, r1
 80021c2:	461a      	mov	r2, r3
 80021c4:	4623      	mov	r3, r4
 80021c6:	f04f 0000 	mov.w	r0, #0
 80021ca:	4933      	ldr	r1, [pc, #204]	; (8002298 <fscale+0x150>)
 80021cc:	f003 face 	bl	800576c <pow>
 80021d0:	4603      	mov	r3, r0
 80021d2:	460c      	mov	r4, r1
 80021d4:	4618      	mov	r0, r3
 80021d6:	4621      	mov	r1, r4
 80021d8:	f7fe fc92 	bl	8000b00 <__aeabi_d2f>
 80021dc:	4603      	mov	r3, r0
 80021de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (inputValue > originalMax) {
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80021e4:	f7fe ffa6 	bl	8001134 <__aeabi_fcmpgt>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <fscale+0xaa>
    inputValue = originalMax;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	63bb      	str	r3, [r7, #56]	; 0x38
  }
  // Zero Refference the values
  OriginalRange = originalMax - originalMin;
 80021f2:	68f9      	ldr	r1, [r7, #12]
 80021f4:	68b8      	ldr	r0, [r7, #8]
 80021f6:	f7fe fcd7 	bl	8000ba8 <__aeabi_fsub>
 80021fa:	4603      	mov	r3, r0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  NewRange = newEnd - newBegin;
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	6838      	ldr	r0, [r7, #0]
 8002202:	f7fe fcd1 	bl	8000ba8 <__aeabi_fsub>
 8002206:	4603      	mov	r3, r0
 8002208:	623b      	str	r3, [r7, #32]
  zeroRefCurVal = inputValue - originalMin;
 800220a:	68f9      	ldr	r1, [r7, #12]
 800220c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800220e:	f7fe fccb 	bl	8000ba8 <__aeabi_fsub>
 8002212:	4603      	mov	r3, r0
 8002214:	61fb      	str	r3, [r7, #28]
  normalizedCurVal  =  zeroRefCurVal / OriginalRange;   // normalize to 0 - 1 float
 8002216:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002218:	69f8      	ldr	r0, [r7, #28]
 800221a:	f7fe fe83 	bl	8000f24 <__aeabi_fdiv>
 800221e:	4603      	mov	r3, r0
 8002220:	61bb      	str	r3, [r7, #24]
  rangedValue =  (pow(normalizedCurVal, curve) * NewRange) + newBegin;
 8002222:	69b8      	ldr	r0, [r7, #24]
 8002224:	f7fe f964 	bl	80004f0 <__aeabi_f2d>
 8002228:	4604      	mov	r4, r0
 800222a:	460d      	mov	r5, r1
 800222c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800222e:	f7fe f95f 	bl	80004f0 <__aeabi_f2d>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4620      	mov	r0, r4
 8002238:	4629      	mov	r1, r5
 800223a:	f003 fa97 	bl	800576c <pow>
 800223e:	4604      	mov	r4, r0
 8002240:	460d      	mov	r5, r1
 8002242:	6a38      	ldr	r0, [r7, #32]
 8002244:	f7fe f954 	bl	80004f0 <__aeabi_f2d>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4620      	mov	r0, r4
 800224e:	4629      	mov	r1, r5
 8002250:	f7fe f9a6 	bl	80005a0 <__aeabi_dmul>
 8002254:	4603      	mov	r3, r0
 8002256:	460c      	mov	r4, r1
 8002258:	4625      	mov	r5, r4
 800225a:	461c      	mov	r4, r3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7fe f947 	bl	80004f0 <__aeabi_f2d>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4620      	mov	r0, r4
 8002268:	4629      	mov	r1, r5
 800226a:	f7fd ffe3 	bl	8000234 <__adddf3>
 800226e:	4603      	mov	r3, r0
 8002270:	460c      	mov	r4, r1
 8002272:	4618      	mov	r0, r3
 8002274:	4621      	mov	r1, r4
 8002276:	f7fe fc43 	bl	8000b00 <__aeabi_d2f>
 800227a:	4603      	mov	r3, r0
 800227c:	617b      	str	r3, [r7, #20]
  return rangedValue;
 800227e:	697b      	ldr	r3, [r7, #20]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bdb0      	pop	{r4, r5, r7, pc}
 8002288:	9999999a 	.word	0x9999999a
 800228c:	bfb99999 	.word	0xbfb99999
 8002290:	41200000 	.word	0x41200000
 8002294:	c1200000 	.word	0xc1200000
 8002298:	40240000 	.word	0x40240000

0800229c <crc32b>:



unsigned int crc32b(unsigned char *message, size_t l)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
   size_t i, j;
   unsigned int crc, msb;

   crc = 0xFFFFFFFF;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	60fb      	str	r3, [r7, #12]
   for(i = 0; i < l; i++) {
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	e020      	b.n	80022f4 <crc32b+0x58>
      // xor next byte to upper bits of crc
      crc ^= (((unsigned int)message[i])<<24);
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	061b      	lsls	r3, r3, #24
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4053      	eors	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
      for (j = 0; j < 8; j++) {    // Do eight times.
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	e00f      	b.n	80022e8 <crc32b+0x4c>
            msb = crc>>31;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	0fdb      	lsrs	r3, r3, #31
 80022cc:	60bb      	str	r3, [r7, #8]
            crc <<= 1;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
            crc ^= (0 - msb) & 0x04C11DB7;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	425a      	negs	r2, r3
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <crc32b+0x6c>)
 80022da:	4013      	ands	r3, r2
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4053      	eors	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
      for (j = 0; j < 8; j++) {    // Do eight times.
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	3301      	adds	r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b07      	cmp	r3, #7
 80022ec:	d9ec      	bls.n	80022c8 <crc32b+0x2c>
   for(i = 0; i < l; i++) {
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d3da      	bcc.n	80022b2 <crc32b+0x16>
      }
   }
   return crc;         // don't complement crc on output
 80022fc:	68fb      	ldr	r3, [r7, #12]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	04c11db7 	.word	0x04c11db7

0800230c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_MspInit+0x5c>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	4a14      	ldr	r2, [pc, #80]	; (8002374 <HAL_MspInit+0x5c>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6193      	str	r3, [r2, #24]
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_MspInit+0x5c>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_MspInit+0x5c>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <HAL_MspInit+0x5c>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002340:	61d3      	str	r3, [r2, #28]
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_MspInit+0x5c>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_MspInit+0x60>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_MspInit+0x60>)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	40021000 	.word	0x40021000
 8002378:	40010000 	.word	0x40010000

0800237c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 0318 	add.w	r3, r7, #24
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a23      	ldr	r2, [pc, #140]	; (8002424 <HAL_ADC_MspInit+0xa8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d13f      	bne.n	800241c <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_ADC_MspInit+0xac>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	4a21      	ldr	r2, [pc, #132]	; (8002428 <HAL_ADC_MspInit+0xac>)
 80023a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a6:	6193      	str	r3, [r2, #24]
 80023a8:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <HAL_ADC_MspInit+0xac>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b4:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <HAL_ADC_MspInit+0xac>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <HAL_ADC_MspInit+0xac>)
 80023ba:	f043 0304 	orr.w	r3, r3, #4
 80023be:	6193      	str	r3, [r2, #24]
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_ADC_MspInit+0xac>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023cc:	4b16      	ldr	r3, [pc, #88]	; (8002428 <HAL_ADC_MspInit+0xac>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	4a15      	ldr	r2, [pc, #84]	; (8002428 <HAL_ADC_MspInit+0xac>)
 80023d2:	f043 0310 	orr.w	r3, r3, #16
 80023d6:	6193      	str	r3, [r2, #24]
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <HAL_ADC_MspInit+0xac>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = SLIDER4_Pin|SLIDER2_Pin;
 80023e4:	23c0      	movs	r3, #192	; 0xc0
 80023e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e8:	2303      	movs	r3, #3
 80023ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ec:	f107 0318 	add.w	r3, r7, #24
 80023f0:	4619      	mov	r1, r3
 80023f2:	480e      	ldr	r0, [pc, #56]	; (800242c <HAL_ADC_MspInit+0xb0>)
 80023f4:	f001 f8b8 	bl	8003568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SLIDER3_Pin|SLIDER1_Pin;
 80023f8:	2330      	movs	r3, #48	; 0x30
 80023fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023fc:	2303      	movs	r3, #3
 80023fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002400:	f107 0318 	add.w	r3, r7, #24
 8002404:	4619      	mov	r1, r3
 8002406:	480a      	ldr	r0, [pc, #40]	; (8002430 <HAL_ADC_MspInit+0xb4>)
 8002408:	f001 f8ae 	bl	8003568 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	2012      	movs	r0, #18
 8002412:	f000 ff4e 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002416:	2012      	movs	r0, #18
 8002418:	f000 ff67 	bl	80032ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800241c:	bf00      	nop
 800241e:	3728      	adds	r7, #40	; 0x28
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40012400 	.word	0x40012400
 8002428:	40021000 	.word	0x40021000
 800242c:	40010800 	.word	0x40010800
 8002430:	40011000 	.word	0x40011000

08002434 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_CRC_MspInit+0x34>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d10b      	bne.n	800245e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_CRC_MspInit+0x38>)
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <HAL_CRC_MspInit+0x38>)
 800244c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002450:	6153      	str	r3, [r2, #20]
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_CRC_MspInit+0x38>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	40023000 	.word	0x40023000
 800246c:	40021000 	.word	0x40021000

08002470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002480:	d10c      	bne.n	800249c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <HAL_TIM_Base_MspInit+0x7c>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a19      	ldr	r2, [pc, #100]	; (80024ec <HAL_TIM_Base_MspInit+0x7c>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	61d3      	str	r3, [r2, #28]
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <HAL_TIM_Base_MspInit+0x7c>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800249a:	e022      	b.n	80024e2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <HAL_TIM_Base_MspInit+0x80>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d10c      	bne.n	80024c0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_TIM_Base_MspInit+0x7c>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a10      	ldr	r2, [pc, #64]	; (80024ec <HAL_TIM_Base_MspInit+0x7c>)
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	61d3      	str	r3, [r2, #28]
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <HAL_TIM_Base_MspInit+0x7c>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]
}
 80024be:	e010      	b.n	80024e2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <HAL_TIM_Base_MspInit+0x84>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d10b      	bne.n	80024e2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_TIM_Base_MspInit+0x7c>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a07      	ldr	r2, [pc, #28]	; (80024ec <HAL_TIM_Base_MspInit+0x7c>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	61d3      	str	r3, [r2, #28]
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_TIM_Base_MspInit+0x7c>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
}
 80024e2:	bf00      	nop
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40000400 	.word	0x40000400
 80024f4:	40000800 	.word	0x40000800

080024f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08c      	sub	sp, #48	; 0x30
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0318 	add.w	r3, r7, #24
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d12b      	bne.n	8002570 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002518:	4b3e      	ldr	r3, [pc, #248]	; (8002614 <HAL_TIM_MspPostInit+0x11c>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a3d      	ldr	r2, [pc, #244]	; (8002614 <HAL_TIM_MspPostInit+0x11c>)
 800251e:	f043 0308 	orr.w	r3, r3, #8
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <HAL_TIM_MspPostInit+0x11c>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = BUZZER_Pin|GPIO_PIN_11;
 8002530:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2302      	movs	r3, #2
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253e:	f107 0318 	add.w	r3, r7, #24
 8002542:	4619      	mov	r1, r3
 8002544:	4834      	ldr	r0, [pc, #208]	; (8002618 <HAL_TIM_MspPostInit+0x120>)
 8002546:	f001 f80f 	bl	8003568 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800254a:	4b34      	ldr	r3, [pc, #208]	; (800261c <HAL_TIM_MspPostInit+0x124>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
 8002558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
 8002568:	4a2c      	ldr	r2, [pc, #176]	; (800261c <HAL_TIM_MspPostInit+0x124>)
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800256e:	e04c      	b.n	800260a <HAL_TIM_MspPostInit+0x112>
  else if(htim->Instance==TIM3)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a2a      	ldr	r2, [pc, #168]	; (8002620 <HAL_TIM_MspPostInit+0x128>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d12a      	bne.n	80025d0 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257a:	4b26      	ldr	r3, [pc, #152]	; (8002614 <HAL_TIM_MspPostInit+0x11c>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	4a25      	ldr	r2, [pc, #148]	; (8002614 <HAL_TIM_MspPostInit+0x11c>)
 8002580:	f043 0308 	orr.w	r3, r3, #8
 8002584:	6193      	str	r3, [r2, #24]
 8002586:	4b23      	ldr	r3, [pc, #140]	; (8002614 <HAL_TIM_MspPostInit+0x11c>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BLUE_PWM_Pin;
 8002592:	2320      	movs	r3, #32
 8002594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2302      	movs	r3, #2
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BLUE_PWM_GPIO_Port, &GPIO_InitStruct);
 800259e:	f107 0318 	add.w	r3, r7, #24
 80025a2:	4619      	mov	r1, r3
 80025a4:	481c      	ldr	r0, [pc, #112]	; (8002618 <HAL_TIM_MspPostInit+0x120>)
 80025a6:	f000 ffdf 	bl	8003568 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80025aa:	4b1c      	ldr	r3, [pc, #112]	; (800261c <HAL_TIM_MspPostInit+0x124>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c8:	4a14      	ldr	r2, [pc, #80]	; (800261c <HAL_TIM_MspPostInit+0x124>)
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	6053      	str	r3, [r2, #4]
}
 80025ce:	e01c      	b.n	800260a <HAL_TIM_MspPostInit+0x112>
  else if(htim->Instance==TIM4)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a13      	ldr	r2, [pc, #76]	; (8002624 <HAL_TIM_MspPostInit+0x12c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d117      	bne.n	800260a <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_TIM_MspPostInit+0x11c>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <HAL_TIM_MspPostInit+0x11c>)
 80025e0:	f043 0308 	orr.w	r3, r3, #8
 80025e4:	6193      	str	r3, [r2, #24]
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_TIM_MspPostInit+0x11c>)
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GREEN_PWM_Pin|RED_PWM_Pin;
 80025f2:	23c0      	movs	r3, #192	; 0xc0
 80025f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2302      	movs	r3, #2
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f107 0318 	add.w	r3, r7, #24
 8002602:	4619      	mov	r1, r3
 8002604:	4804      	ldr	r0, [pc, #16]	; (8002618 <HAL_TIM_MspPostInit+0x120>)
 8002606:	f000 ffaf 	bl	8003568 <HAL_GPIO_Init>
}
 800260a:	bf00      	nop
 800260c:	3730      	adds	r7, #48	; 0x30
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	40010c00 	.word	0x40010c00
 800261c:	40010000 	.word	0x40010000
 8002620:	40000400 	.word	0x40000400
 8002624:	40000800 	.word	0x40000800

08002628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 0310 	add.w	r3, r7, #16
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a20      	ldr	r2, [pc, #128]	; (80026c4 <HAL_UART_MspInit+0x9c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d139      	bne.n	80026bc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002648:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <HAL_UART_MspInit+0xa0>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_UART_MspInit+0xa0>)
 800264e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002652:	6193      	str	r3, [r2, #24]
 8002654:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <HAL_UART_MspInit+0xa0>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_UART_MspInit+0xa0>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a18      	ldr	r2, [pc, #96]	; (80026c8 <HAL_UART_MspInit+0xa0>)
 8002666:	f043 0304 	orr.w	r3, r3, #4
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <HAL_UART_MspInit+0xa0>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800267c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	f107 0310 	add.w	r3, r7, #16
 800268a:	4619      	mov	r1, r3
 800268c:	480f      	ldr	r0, [pc, #60]	; (80026cc <HAL_UART_MspInit+0xa4>)
 800268e:	f000 ff6b 	bl	8003568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	4619      	mov	r1, r3
 80026a6:	4809      	ldr	r0, [pc, #36]	; (80026cc <HAL_UART_MspInit+0xa4>)
 80026a8:	f000 ff5e 	bl	8003568 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2100      	movs	r1, #0
 80026b0:	2025      	movs	r0, #37	; 0x25
 80026b2:	f000 fdfe 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026b6:	2025      	movs	r0, #37	; 0x25
 80026b8:	f000 fe17 	bl	80032ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026bc:	bf00      	nop
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40013800 	.word	0x40013800
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40010800 	.word	0x40010800

080026d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <HardFault_Handler+0x4>

080026e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e6:	e7fe      	b.n	80026e6 <MemManage_Handler+0x4>

080026e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ec:	e7fe      	b.n	80026ec <BusFault_Handler+0x4>

080026ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f2:	e7fe      	b.n	80026f2 <UsageFault_Handler+0x4>

080026f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800271c:	f000 f8c0 	bl	80028a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}

08002724 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <ADC1_2_IRQHandler+0x10>)
 800272a:	f000 fa91 	bl	8002c50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000148 	.word	0x20000148

08002738 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <USART1_IRQHandler+0x10>)
 800273e:	f002 fceb 	bl	8005118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000178 	.word	0x20000178

0800274c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <SystemInit+0x70>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a19      	ldr	r2, [pc, #100]	; (80027bc <SystemInit+0x70>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 800275c:	4b17      	ldr	r3, [pc, #92]	; (80027bc <SystemInit+0x70>)
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4916      	ldr	r1, [pc, #88]	; (80027bc <SystemInit+0x70>)
 8002762:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <SystemInit+0x74>)
 8002764:	4013      	ands	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <SystemInit+0x70>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a13      	ldr	r2, [pc, #76]	; (80027bc <SystemInit+0x70>)
 800276e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002776:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002778:	4b10      	ldr	r3, [pc, #64]	; (80027bc <SystemInit+0x70>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0f      	ldr	r2, [pc, #60]	; (80027bc <SystemInit+0x70>)
 800277e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002782:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002784:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <SystemInit+0x70>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <SystemInit+0x70>)
 800278a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800278e:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <SystemInit+0x70>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a09      	ldr	r2, [pc, #36]	; (80027bc <SystemInit+0x70>)
 8002796:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800279a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <SystemInit+0x70>)
 800279e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80027a2:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <SystemInit+0x70>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <SystemInit+0x78>)
 80027ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027b0:	609a      	str	r2, [r3, #8]
#endif 
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	f0ff0000 	.word	0xf0ff0000
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027ca:	e003      	b.n	80027d4 <LoopCopyDataInit>

080027cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027d2:	3104      	adds	r1, #4

080027d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027d4:	480a      	ldr	r0, [pc, #40]	; (8002800 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80027d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027dc:	d3f6      	bcc.n	80027cc <CopyDataInit>
  ldr r2, =_sbss
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80027e0:	e002      	b.n	80027e8 <LoopFillZerobss>

080027e2 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80027e4:	f842 3b04 	str.w	r3, [r2], #4

080027e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80027ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80027ec:	d3f9      	bcc.n	80027e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027ee:	f7ff ffad 	bl	800274c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027f2:	f002 ff8f 	bl	8005714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027f6:	f7fe fe49 	bl	800148c <main>
  bx lr
 80027fa:	4770      	bx	lr
  ldr r3, =_sidata
 80027fc:	08006878 	.word	0x08006878
  ldr r0, =_sdata
 8002800:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002804:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 8002808:	20000094 	.word	0x20000094
  ldr r3, = _ebss
 800280c:	20000200 	.word	0x20000200

08002810 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002810:	e7fe      	b.n	8002810 <CAN1_RX0_IRQHandler>
	...

08002814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_Init+0x28>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <HAL_Init+0x28>)
 800281e:	f043 0310 	orr.w	r3, r3, #16
 8002822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002824:	2003      	movs	r0, #3
 8002826:	f000 fd39 	bl	800329c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f808 	bl	8002840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002830:	f7ff fd72 	bl	8002318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40022000 	.word	0x40022000

08002840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_InitTick+0x54>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_InitTick+0x58>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002856:	fbb3 f3f1 	udiv	r3, r3, r1
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f000 fd51 	bl	8003306 <HAL_SYSTICK_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00e      	b.n	800288c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d80a      	bhi.n	800288a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002874:	2200      	movs	r2, #0
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f000 fd19 	bl	80032b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <HAL_InitTick+0x5c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000020 	.word	0x20000020
 8002898:	20000028 	.word	0x20000028
 800289c:	20000024 	.word	0x20000024

080028a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_IncTick+0x1c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_IncTick+0x20>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a03      	ldr	r2, [pc, #12]	; (80028c0 <HAL_IncTick+0x20>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	20000028 	.word	0x20000028
 80028c0:	200001fc 	.word	0x200001fc

080028c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return uwTick;
 80028c8:	4b02      	ldr	r3, [pc, #8]	; (80028d4 <HAL_GetTick+0x10>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	200001fc 	.word	0x200001fc

080028d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff fff0 	bl	80028c4 <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d005      	beq.n	80028fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_Delay+0x40>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fe:	bf00      	nop
 8002900:	f7ff ffe0 	bl	80028c4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	429a      	cmp	r2, r3
 800290e:	d8f7      	bhi.n	8002900 <HAL_Delay+0x28>
  {
  }
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000028 	.word	0x20000028

0800291c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0be      	b.n	8002abc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fd0e 	bl	800237c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fb8b 	bl	800307c <ADC_ConversionStop_Disable>
 8002966:	4603      	mov	r3, r0
 8002968:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 8099 	bne.w	8002aaa <HAL_ADC_Init+0x18e>
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 8095 	bne.w	8002aaa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002988:	f023 0302 	bic.w	r3, r3, #2
 800298c:	f043 0202 	orr.w	r2, r3, #2
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800299c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7b1b      	ldrb	r3, [r3, #12]
 80029a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b4:	d003      	beq.n	80029be <HAL_ADC_Init+0xa2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d102      	bne.n	80029c4 <HAL_ADC_Init+0xa8>
 80029be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c2:	e000      	b.n	80029c6 <HAL_ADC_Init+0xaa>
 80029c4:	2300      	movs	r3, #0
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7d1b      	ldrb	r3, [r3, #20]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d119      	bne.n	8002a08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7b1b      	ldrb	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	035a      	lsls	r2, r3, #13
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	e00b      	b.n	8002a08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <HAL_ADC_Init+0x1a8>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a38:	d003      	beq.n	8002a42 <HAL_ADC_Init+0x126>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d104      	bne.n	8002a4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	051b      	lsls	r3, r3, #20
 8002a4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_ADC_Init+0x1ac>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d10b      	bne.n	8002a88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a86:	e018      	b.n	8002aba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	f023 0312 	bic.w	r3, r3, #18
 8002a90:	f043 0210 	orr.w	r2, r3, #16
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002aa8:	e007      	b.n	8002aba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	f043 0210 	orr.w	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	ffe1f7fd 	.word	0xffe1f7fd
 8002ac8:	ff1f0efe 	.word	0xff1f0efe

08002acc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_Start_IT+0x1a>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0a0      	b.n	8002c28 <HAL_ADC_Start_IT+0x15c>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa72 	bl	8002fd8 <ADC_Enable>
 8002af4:	4603      	mov	r3, r0
 8002af6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f040 808f 	bne.w	8002c1e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a45      	ldr	r2, [pc, #276]	; (8002c30 <HAL_ADC_Start_IT+0x164>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d105      	bne.n	8002b2a <HAL_ADC_Start_IT+0x5e>
 8002b1e:	4b45      	ldr	r3, [pc, #276]	; (8002c34 <HAL_ADC_Start_IT+0x168>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d115      	bne.n	8002b56 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d026      	beq.n	8002b92 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b54:	e01d      	b.n	8002b92 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a33      	ldr	r2, [pc, #204]	; (8002c34 <HAL_ADC_Start_IT+0x168>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d004      	beq.n	8002b76 <HAL_ADC_Start_IT+0xaa>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2f      	ldr	r2, [pc, #188]	; (8002c30 <HAL_ADC_Start_IT+0x164>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10d      	bne.n	8002b92 <HAL_ADC_Start_IT+0xc6>
 8002b76:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <HAL_ADC_Start_IT+0x168>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d006      	beq.n	8002bac <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	f023 0206 	bic.w	r2, r3, #6
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002baa:	e002      	b.n	8002bb2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f06f 0202 	mvn.w	r2, #2
 8002bc2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0220 	orr.w	r2, r2, #32
 8002bd2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002bde:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002be2:	d113      	bne.n	8002c0c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002be8:	4a11      	ldr	r2, [pc, #68]	; (8002c30 <HAL_ADC_Start_IT+0x164>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d105      	bne.n	8002bfa <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <HAL_ADC_Start_IT+0x168>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d108      	bne.n	8002c0c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	e00c      	b.n	8002c26 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	e003      	b.n	8002c26 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40012800 	.word	0x40012800
 8002c34:	40012400 	.word	0x40012400

08002c38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d140      	bne.n	8002ce8 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d139      	bne.n	8002ce8 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c96:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c9a:	d11d      	bne.n	8002cd8 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d119      	bne.n	8002cd8 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0220 	bic.w	r2, r2, #32
 8002cb2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff f9cb 	bl	8002074 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f06f 0212 	mvn.w	r2, #18
 8002ce6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	2b80      	cmp	r3, #128	; 0x80
 8002cf4:	d14f      	bne.n	8002d96 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d148      	bne.n	8002d96 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002d26:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002d2a:	d012      	beq.n	8002d52 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d125      	bne.n	8002d86 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002d44:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d48:	d11d      	bne.n	8002d86 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d119      	bne.n	8002d86 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d60:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f9b2 	bl	80030f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 020c 	mvn.w	r2, #12
 8002d94:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d114      	bne.n	8002dce <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10d      	bne.n	8002dce <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f809 	bl	8002dd6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0201 	mvn.w	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x20>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e0dc      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x1da>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b06      	cmp	r3, #6
 8002e16:	d81c      	bhi.n	8002e52 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	3b05      	subs	r3, #5
 8002e2a:	221f      	movs	r2, #31
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	4019      	ands	r1, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	3b05      	subs	r3, #5
 8002e44:	fa00 f203 	lsl.w	r2, r0, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	635a      	str	r2, [r3, #52]	; 0x34
 8002e50:	e03c      	b.n	8002ecc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b0c      	cmp	r3, #12
 8002e58:	d81c      	bhi.n	8002e94 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	3b23      	subs	r3, #35	; 0x23
 8002e6c:	221f      	movs	r2, #31
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	4019      	ands	r1, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	3b23      	subs	r3, #35	; 0x23
 8002e86:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
 8002e92:	e01b      	b.n	8002ecc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3b41      	subs	r3, #65	; 0x41
 8002ea6:	221f      	movs	r2, #31
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	4019      	ands	r1, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b41      	subs	r3, #65	; 0x41
 8002ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b09      	cmp	r3, #9
 8002ed2:	d91c      	bls.n	8002f0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68d9      	ldr	r1, [r3, #12]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3b1e      	subs	r3, #30
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	4019      	ands	r1, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6898      	ldr	r0, [r3, #8]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	3b1e      	subs	r3, #30
 8002f00:	fa00 f203 	lsl.w	r2, r0, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	60da      	str	r2, [r3, #12]
 8002f0c:	e019      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6919      	ldr	r1, [r3, #16]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	2207      	movs	r2, #7
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	4019      	ands	r1, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6898      	ldr	r0, [r3, #8]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	fa00 f203 	lsl.w	r2, r0, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d003      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f4e:	2b11      	cmp	r3, #17
 8002f50:	d132      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <HAL_ADC_ConfigChannel+0x1e4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d125      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d126      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f78:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d11a      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	0c9a      	lsrs	r2, r3, #18
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f98:	e002      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f9      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x1b2>
 8002fa6:	e007      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	f043 0220 	orr.w	r2, r3, #32
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	40012400 	.word	0x40012400
 8002fd0:	20000020 	.word	0x20000020
 8002fd4:	431bde83 	.word	0x431bde83

08002fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d039      	beq.n	800306a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003006:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <ADC_Enable+0x9c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <ADC_Enable+0xa0>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	0c9b      	lsrs	r3, r3, #18
 8003012:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003014:	e002      	b.n	800301c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3b01      	subs	r3, #1
 800301a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f9      	bne.n	8003016 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003022:	f7ff fc4f 	bl	80028c4 <HAL_GetTick>
 8003026:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003028:	e018      	b.n	800305c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800302a:	f7ff fc4b 	bl	80028c4 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d911      	bls.n	800305c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f043 0210 	orr.w	r2, r3, #16
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	f043 0201 	orr.w	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e007      	b.n	800306c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d1df      	bne.n	800302a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000020 	.word	0x20000020
 8003078:	431bde83 	.word	0x431bde83

0800307c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d127      	bne.n	80030e6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030a6:	f7ff fc0d 	bl	80028c4 <HAL_GetTick>
 80030aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030ac:	e014      	b.n	80030d8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030ae:	f7ff fc09 	bl	80028c4 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d90d      	bls.n	80030d8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	f043 0210 	orr.w	r2, r3, #16
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	f043 0201 	orr.w	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e007      	b.n	80030e8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d0e3      	beq.n	80030ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
	...

08003104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <__NVIC_SetPriorityGrouping+0x44>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003120:	4013      	ands	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800312c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003136:	4a04      	ldr	r2, [pc, #16]	; (8003148 <__NVIC_SetPriorityGrouping+0x44>)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	60d3      	str	r3, [r2, #12]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <__NVIC_GetPriorityGrouping+0x18>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	f003 0307 	and.w	r3, r3, #7
}
 800315a:	4618      	mov	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	2b00      	cmp	r3, #0
 8003178:	db0b      	blt.n	8003192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	4906      	ldr	r1, [pc, #24]	; (800319c <__NVIC_EnableIRQ+0x34>)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2001      	movs	r0, #1
 800318a:	fa00 f202 	lsl.w	r2, r0, r2
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	e000e100 	.word	0xe000e100

080031a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	6039      	str	r1, [r7, #0]
 80031aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	db0a      	blt.n	80031ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	490c      	ldr	r1, [pc, #48]	; (80031ec <__NVIC_SetPriority+0x4c>)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	0112      	lsls	r2, r2, #4
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	440b      	add	r3, r1
 80031c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c8:	e00a      	b.n	80031e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	4908      	ldr	r1, [pc, #32]	; (80031f0 <__NVIC_SetPriority+0x50>)
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	3b04      	subs	r3, #4
 80031d8:	0112      	lsls	r2, r2, #4
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	440b      	add	r3, r1
 80031de:	761a      	strb	r2, [r3, #24]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000e100 	.word	0xe000e100
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	; 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f1c3 0307 	rsb	r3, r3, #7
 800320e:	2b04      	cmp	r3, #4
 8003210:	bf28      	it	cs
 8003212:	2304      	movcs	r3, #4
 8003214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3304      	adds	r3, #4
 800321a:	2b06      	cmp	r3, #6
 800321c:	d902      	bls.n	8003224 <NVIC_EncodePriority+0x30>
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3b03      	subs	r3, #3
 8003222:	e000      	b.n	8003226 <NVIC_EncodePriority+0x32>
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003228:	f04f 32ff 	mov.w	r2, #4294967295
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43da      	mvns	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	401a      	ands	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800323c:	f04f 31ff 	mov.w	r1, #4294967295
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	43d9      	mvns	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	4313      	orrs	r3, r2
         );
}
 800324e:	4618      	mov	r0, r3
 8003250:	3724      	adds	r7, #36	; 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003268:	d301      	bcc.n	800326e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800326a:	2301      	movs	r3, #1
 800326c:	e00f      	b.n	800328e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <SysTick_Config+0x40>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003276:	210f      	movs	r1, #15
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f7ff ff90 	bl	80031a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <SysTick_Config+0x40>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003286:	4b04      	ldr	r3, [pc, #16]	; (8003298 <SysTick_Config+0x40>)
 8003288:	2207      	movs	r2, #7
 800328a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	e000e010 	.word	0xe000e010

0800329c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff2d 	bl	8003104 <__NVIC_SetPriorityGrouping>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c4:	f7ff ff42 	bl	800314c <__NVIC_GetPriorityGrouping>
 80032c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ff90 	bl	80031f4 <NVIC_EncodePriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff5f 	bl	80031a0 <__NVIC_SetPriority>
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff35 	bl	8003168 <__NVIC_EnableIRQ>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffa2 	bl	8003258 <SysTick_Config>
 8003314:	4603      	mov	r3, r0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e00e      	b.n	800334e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	795b      	ldrb	r3, [r3, #5]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff f877 	bl	8002434 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800336a:	2b02      	cmp	r3, #2
 800336c:	d005      	beq.n	800337a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2204      	movs	r2, #4
 8003372:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
 8003378:	e0d6      	b.n	8003528 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 020e 	bic.w	r2, r2, #14
 8003388:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	4b64      	ldr	r3, [pc, #400]	; (8003534 <HAL_DMA_Abort_IT+0x1dc>)
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d958      	bls.n	8003458 <HAL_DMA_Abort_IT+0x100>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a63      	ldr	r2, [pc, #396]	; (8003538 <HAL_DMA_Abort_IT+0x1e0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d04f      	beq.n	8003450 <HAL_DMA_Abort_IT+0xf8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a61      	ldr	r2, [pc, #388]	; (800353c <HAL_DMA_Abort_IT+0x1e4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d048      	beq.n	800344c <HAL_DMA_Abort_IT+0xf4>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a60      	ldr	r2, [pc, #384]	; (8003540 <HAL_DMA_Abort_IT+0x1e8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d040      	beq.n	8003446 <HAL_DMA_Abort_IT+0xee>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a5e      	ldr	r2, [pc, #376]	; (8003544 <HAL_DMA_Abort_IT+0x1ec>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d038      	beq.n	8003440 <HAL_DMA_Abort_IT+0xe8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a5d      	ldr	r2, [pc, #372]	; (8003548 <HAL_DMA_Abort_IT+0x1f0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d030      	beq.n	800343a <HAL_DMA_Abort_IT+0xe2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a5b      	ldr	r2, [pc, #364]	; (800354c <HAL_DMA_Abort_IT+0x1f4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d028      	beq.n	8003434 <HAL_DMA_Abort_IT+0xdc>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a53      	ldr	r2, [pc, #332]	; (8003534 <HAL_DMA_Abort_IT+0x1dc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d020      	beq.n	800342e <HAL_DMA_Abort_IT+0xd6>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a57      	ldr	r2, [pc, #348]	; (8003550 <HAL_DMA_Abort_IT+0x1f8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d019      	beq.n	800342a <HAL_DMA_Abort_IT+0xd2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a56      	ldr	r2, [pc, #344]	; (8003554 <HAL_DMA_Abort_IT+0x1fc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d012      	beq.n	8003426 <HAL_DMA_Abort_IT+0xce>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a54      	ldr	r2, [pc, #336]	; (8003558 <HAL_DMA_Abort_IT+0x200>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00a      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a53      	ldr	r2, [pc, #332]	; (800355c <HAL_DMA_Abort_IT+0x204>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d102      	bne.n	800341a <HAL_DMA_Abort_IT+0xc2>
 8003414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003418:	e01b      	b.n	8003452 <HAL_DMA_Abort_IT+0xfa>
 800341a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800341e:	e018      	b.n	8003452 <HAL_DMA_Abort_IT+0xfa>
 8003420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003424:	e015      	b.n	8003452 <HAL_DMA_Abort_IT+0xfa>
 8003426:	2310      	movs	r3, #16
 8003428:	e013      	b.n	8003452 <HAL_DMA_Abort_IT+0xfa>
 800342a:	2301      	movs	r3, #1
 800342c:	e011      	b.n	8003452 <HAL_DMA_Abort_IT+0xfa>
 800342e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003432:	e00e      	b.n	8003452 <HAL_DMA_Abort_IT+0xfa>
 8003434:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003438:	e00b      	b.n	8003452 <HAL_DMA_Abort_IT+0xfa>
 800343a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800343e:	e008      	b.n	8003452 <HAL_DMA_Abort_IT+0xfa>
 8003440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003444:	e005      	b.n	8003452 <HAL_DMA_Abort_IT+0xfa>
 8003446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800344a:	e002      	b.n	8003452 <HAL_DMA_Abort_IT+0xfa>
 800344c:	2310      	movs	r3, #16
 800344e:	e000      	b.n	8003452 <HAL_DMA_Abort_IT+0xfa>
 8003450:	2301      	movs	r3, #1
 8003452:	4a43      	ldr	r2, [pc, #268]	; (8003560 <HAL_DMA_Abort_IT+0x208>)
 8003454:	6053      	str	r3, [r2, #4]
 8003456:	e057      	b.n	8003508 <HAL_DMA_Abort_IT+0x1b0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a36      	ldr	r2, [pc, #216]	; (8003538 <HAL_DMA_Abort_IT+0x1e0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d04f      	beq.n	8003502 <HAL_DMA_Abort_IT+0x1aa>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a35      	ldr	r2, [pc, #212]	; (800353c <HAL_DMA_Abort_IT+0x1e4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d048      	beq.n	80034fe <HAL_DMA_Abort_IT+0x1a6>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a33      	ldr	r2, [pc, #204]	; (8003540 <HAL_DMA_Abort_IT+0x1e8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d040      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x1a0>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a32      	ldr	r2, [pc, #200]	; (8003544 <HAL_DMA_Abort_IT+0x1ec>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d038      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x19a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a30      	ldr	r2, [pc, #192]	; (8003548 <HAL_DMA_Abort_IT+0x1f0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d030      	beq.n	80034ec <HAL_DMA_Abort_IT+0x194>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2f      	ldr	r2, [pc, #188]	; (800354c <HAL_DMA_Abort_IT+0x1f4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d028      	beq.n	80034e6 <HAL_DMA_Abort_IT+0x18e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a26      	ldr	r2, [pc, #152]	; (8003534 <HAL_DMA_Abort_IT+0x1dc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d020      	beq.n	80034e0 <HAL_DMA_Abort_IT+0x188>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2b      	ldr	r2, [pc, #172]	; (8003550 <HAL_DMA_Abort_IT+0x1f8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d019      	beq.n	80034dc <HAL_DMA_Abort_IT+0x184>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a29      	ldr	r2, [pc, #164]	; (8003554 <HAL_DMA_Abort_IT+0x1fc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d012      	beq.n	80034d8 <HAL_DMA_Abort_IT+0x180>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a28      	ldr	r2, [pc, #160]	; (8003558 <HAL_DMA_Abort_IT+0x200>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00a      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x17a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a26      	ldr	r2, [pc, #152]	; (800355c <HAL_DMA_Abort_IT+0x204>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d102      	bne.n	80034cc <HAL_DMA_Abort_IT+0x174>
 80034c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ca:	e01b      	b.n	8003504 <HAL_DMA_Abort_IT+0x1ac>
 80034cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034d0:	e018      	b.n	8003504 <HAL_DMA_Abort_IT+0x1ac>
 80034d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034d6:	e015      	b.n	8003504 <HAL_DMA_Abort_IT+0x1ac>
 80034d8:	2310      	movs	r3, #16
 80034da:	e013      	b.n	8003504 <HAL_DMA_Abort_IT+0x1ac>
 80034dc:	2301      	movs	r3, #1
 80034de:	e011      	b.n	8003504 <HAL_DMA_Abort_IT+0x1ac>
 80034e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034e4:	e00e      	b.n	8003504 <HAL_DMA_Abort_IT+0x1ac>
 80034e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034ea:	e00b      	b.n	8003504 <HAL_DMA_Abort_IT+0x1ac>
 80034ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034f0:	e008      	b.n	8003504 <HAL_DMA_Abort_IT+0x1ac>
 80034f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f6:	e005      	b.n	8003504 <HAL_DMA_Abort_IT+0x1ac>
 80034f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034fc:	e002      	b.n	8003504 <HAL_DMA_Abort_IT+0x1ac>
 80034fe:	2310      	movs	r3, #16
 8003500:	e000      	b.n	8003504 <HAL_DMA_Abort_IT+0x1ac>
 8003502:	2301      	movs	r3, #1
 8003504:	4a17      	ldr	r2, [pc, #92]	; (8003564 <HAL_DMA_Abort_IT+0x20c>)
 8003506:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
    } 
  }
  return status;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40020080 	.word	0x40020080
 8003538:	40020008 	.word	0x40020008
 800353c:	4002001c 	.word	0x4002001c
 8003540:	40020030 	.word	0x40020030
 8003544:	40020044 	.word	0x40020044
 8003548:	40020058 	.word	0x40020058
 800354c:	4002006c 	.word	0x4002006c
 8003550:	40020408 	.word	0x40020408
 8003554:	4002041c 	.word	0x4002041c
 8003558:	40020430 	.word	0x40020430
 800355c:	40020444 	.word	0x40020444
 8003560:	40020400 	.word	0x40020400
 8003564:	40020000 	.word	0x40020000

08003568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003568:	b480      	push	{r7}
 800356a:	b08b      	sub	sp, #44	; 0x2c
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003572:	2300      	movs	r3, #0
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357a:	e127      	b.n	80037cc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800357c:	2201      	movs	r2, #1
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	429a      	cmp	r2, r3
 8003596:	f040 8116 	bne.w	80037c6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b12      	cmp	r3, #18
 80035a0:	d034      	beq.n	800360c <HAL_GPIO_Init+0xa4>
 80035a2:	2b12      	cmp	r3, #18
 80035a4:	d80d      	bhi.n	80035c2 <HAL_GPIO_Init+0x5a>
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d02b      	beq.n	8003602 <HAL_GPIO_Init+0x9a>
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d804      	bhi.n	80035b8 <HAL_GPIO_Init+0x50>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d031      	beq.n	8003616 <HAL_GPIO_Init+0xae>
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d01c      	beq.n	80035f0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035b6:	e048      	b.n	800364a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d043      	beq.n	8003644 <HAL_GPIO_Init+0xdc>
 80035bc:	2b11      	cmp	r3, #17
 80035be:	d01b      	beq.n	80035f8 <HAL_GPIO_Init+0x90>
          break;
 80035c0:	e043      	b.n	800364a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035c2:	4a89      	ldr	r2, [pc, #548]	; (80037e8 <HAL_GPIO_Init+0x280>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d026      	beq.n	8003616 <HAL_GPIO_Init+0xae>
 80035c8:	4a87      	ldr	r2, [pc, #540]	; (80037e8 <HAL_GPIO_Init+0x280>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d806      	bhi.n	80035dc <HAL_GPIO_Init+0x74>
 80035ce:	4a87      	ldr	r2, [pc, #540]	; (80037ec <HAL_GPIO_Init+0x284>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d020      	beq.n	8003616 <HAL_GPIO_Init+0xae>
 80035d4:	4a86      	ldr	r2, [pc, #536]	; (80037f0 <HAL_GPIO_Init+0x288>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01d      	beq.n	8003616 <HAL_GPIO_Init+0xae>
          break;
 80035da:	e036      	b.n	800364a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035dc:	4a85      	ldr	r2, [pc, #532]	; (80037f4 <HAL_GPIO_Init+0x28c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d019      	beq.n	8003616 <HAL_GPIO_Init+0xae>
 80035e2:	4a85      	ldr	r2, [pc, #532]	; (80037f8 <HAL_GPIO_Init+0x290>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d016      	beq.n	8003616 <HAL_GPIO_Init+0xae>
 80035e8:	4a84      	ldr	r2, [pc, #528]	; (80037fc <HAL_GPIO_Init+0x294>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_GPIO_Init+0xae>
          break;
 80035ee:	e02c      	b.n	800364a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	623b      	str	r3, [r7, #32]
          break;
 80035f6:	e028      	b.n	800364a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	3304      	adds	r3, #4
 80035fe:	623b      	str	r3, [r7, #32]
          break;
 8003600:	e023      	b.n	800364a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	3308      	adds	r3, #8
 8003608:	623b      	str	r3, [r7, #32]
          break;
 800360a:	e01e      	b.n	800364a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	330c      	adds	r3, #12
 8003612:	623b      	str	r3, [r7, #32]
          break;
 8003614:	e019      	b.n	800364a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d102      	bne.n	8003624 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800361e:	2304      	movs	r3, #4
 8003620:	623b      	str	r3, [r7, #32]
          break;
 8003622:	e012      	b.n	800364a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800362c:	2308      	movs	r3, #8
 800362e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	611a      	str	r2, [r3, #16]
          break;
 8003636:	e008      	b.n	800364a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003638:	2308      	movs	r3, #8
 800363a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	615a      	str	r2, [r3, #20]
          break;
 8003642:	e002      	b.n	800364a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003644:	2300      	movs	r3, #0
 8003646:	623b      	str	r3, [r7, #32]
          break;
 8003648:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2bff      	cmp	r3, #255	; 0xff
 800364e:	d801      	bhi.n	8003654 <HAL_GPIO_Init+0xec>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	e001      	b.n	8003658 <HAL_GPIO_Init+0xf0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2bff      	cmp	r3, #255	; 0xff
 800365e:	d802      	bhi.n	8003666 <HAL_GPIO_Init+0xfe>
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	e002      	b.n	800366c <HAL_GPIO_Init+0x104>
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	3b08      	subs	r3, #8
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	210f      	movs	r1, #15
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	401a      	ands	r2, r3
 800367e:	6a39      	ldr	r1, [r7, #32]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	431a      	orrs	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8096 	beq.w	80037c6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800369a:	4b59      	ldr	r3, [pc, #356]	; (8003800 <HAL_GPIO_Init+0x298>)
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	4a58      	ldr	r2, [pc, #352]	; (8003800 <HAL_GPIO_Init+0x298>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6193      	str	r3, [r2, #24]
 80036a6:	4b56      	ldr	r3, [pc, #344]	; (8003800 <HAL_GPIO_Init+0x298>)
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036b2:	4a54      	ldr	r2, [pc, #336]	; (8003804 <HAL_GPIO_Init+0x29c>)
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	089b      	lsrs	r3, r3, #2
 80036b8:	3302      	adds	r3, #2
 80036ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036be:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	220f      	movs	r2, #15
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4b      	ldr	r2, [pc, #300]	; (8003808 <HAL_GPIO_Init+0x2a0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_GPIO_Init+0x19e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4a      	ldr	r2, [pc, #296]	; (800380c <HAL_GPIO_Init+0x2a4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00d      	beq.n	8003702 <HAL_GPIO_Init+0x19a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a49      	ldr	r2, [pc, #292]	; (8003810 <HAL_GPIO_Init+0x2a8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <HAL_GPIO_Init+0x196>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a48      	ldr	r2, [pc, #288]	; (8003814 <HAL_GPIO_Init+0x2ac>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <HAL_GPIO_Init+0x192>
 80036f6:	2303      	movs	r3, #3
 80036f8:	e006      	b.n	8003708 <HAL_GPIO_Init+0x1a0>
 80036fa:	2304      	movs	r3, #4
 80036fc:	e004      	b.n	8003708 <HAL_GPIO_Init+0x1a0>
 80036fe:	2302      	movs	r3, #2
 8003700:	e002      	b.n	8003708 <HAL_GPIO_Init+0x1a0>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_GPIO_Init+0x1a0>
 8003706:	2300      	movs	r3, #0
 8003708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370a:	f002 0203 	and.w	r2, r2, #3
 800370e:	0092      	lsls	r2, r2, #2
 8003710:	4093      	lsls	r3, r2
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003718:	493a      	ldr	r1, [pc, #232]	; (8003804 <HAL_GPIO_Init+0x29c>)
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3302      	adds	r3, #2
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003732:	4b39      	ldr	r3, [pc, #228]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4938      	ldr	r1, [pc, #224]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]
 800373e:	e006      	b.n	800374e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003740:	4b35      	ldr	r3, [pc, #212]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	43db      	mvns	r3, r3
 8003748:	4933      	ldr	r1, [pc, #204]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 800374a:	4013      	ands	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d006      	beq.n	8003768 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800375a:	4b2f      	ldr	r3, [pc, #188]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	492e      	ldr	r1, [pc, #184]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	604b      	str	r3, [r1, #4]
 8003766:	e006      	b.n	8003776 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003768:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	43db      	mvns	r3, r3
 8003770:	4929      	ldr	r1, [pc, #164]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 8003772:	4013      	ands	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d006      	beq.n	8003790 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003782:	4b25      	ldr	r3, [pc, #148]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	4924      	ldr	r1, [pc, #144]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
 800378e:	e006      	b.n	800379e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003790:	4b21      	ldr	r3, [pc, #132]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	43db      	mvns	r3, r3
 8003798:	491f      	ldr	r1, [pc, #124]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 800379a:	4013      	ands	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d006      	beq.n	80037b8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	491a      	ldr	r1, [pc, #104]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60cb      	str	r3, [r1, #12]
 80037b6:	e006      	b.n	80037c6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037b8:	4b17      	ldr	r3, [pc, #92]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	43db      	mvns	r3, r3
 80037c0:	4915      	ldr	r1, [pc, #84]	; (8003818 <HAL_GPIO_Init+0x2b0>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	3301      	adds	r3, #1
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f47f aed0 	bne.w	800357c <HAL_GPIO_Init+0x14>
  }
}
 80037dc:	bf00      	nop
 80037de:	372c      	adds	r7, #44	; 0x2c
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	10210000 	.word	0x10210000
 80037ec:	10110000 	.word	0x10110000
 80037f0:	10120000 	.word	0x10120000
 80037f4:	10310000 	.word	0x10310000
 80037f8:	10320000 	.word	0x10320000
 80037fc:	10220000 	.word	0x10220000
 8003800:	40021000 	.word	0x40021000
 8003804:	40010000 	.word	0x40010000
 8003808:	40010800 	.word	0x40010800
 800380c:	40010c00 	.word	0x40010c00
 8003810:	40011000 	.word	0x40011000
 8003814:	40011400 	.word	0x40011400
 8003818:	40010400 	.word	0x40010400

0800381c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	887b      	ldrh	r3, [r7, #2]
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
 8003838:	e001      	b.n	800383e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	807b      	strh	r3, [r7, #2]
 8003856:	4613      	mov	r3, r2
 8003858:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800385a:	787b      	ldrb	r3, [r7, #1]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003860:	887a      	ldrh	r2, [r7, #2]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003866:	e003      	b.n	8003870 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	041a      	lsls	r2, r3, #16
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	611a      	str	r2, [r3, #16]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr
	...

0800387c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e304      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8087 	beq.w	80039aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800389c:	4b92      	ldr	r3, [pc, #584]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d00c      	beq.n	80038c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038a8:	4b8f      	ldr	r3, [pc, #572]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 030c 	and.w	r3, r3, #12
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d112      	bne.n	80038da <HAL_RCC_OscConfig+0x5e>
 80038b4:	4b8c      	ldr	r3, [pc, #560]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c0:	d10b      	bne.n	80038da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c2:	4b89      	ldr	r3, [pc, #548]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d06c      	beq.n	80039a8 <HAL_RCC_OscConfig+0x12c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d168      	bne.n	80039a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e2de      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e2:	d106      	bne.n	80038f2 <HAL_RCC_OscConfig+0x76>
 80038e4:	4b80      	ldr	r3, [pc, #512]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a7f      	ldr	r2, [pc, #508]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	e02e      	b.n	8003950 <HAL_RCC_OscConfig+0xd4>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10c      	bne.n	8003914 <HAL_RCC_OscConfig+0x98>
 80038fa:	4b7b      	ldr	r3, [pc, #492]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a7a      	ldr	r2, [pc, #488]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 8003900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	4b78      	ldr	r3, [pc, #480]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a77      	ldr	r2, [pc, #476]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 800390c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	e01d      	b.n	8003950 <HAL_RCC_OscConfig+0xd4>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800391c:	d10c      	bne.n	8003938 <HAL_RCC_OscConfig+0xbc>
 800391e:	4b72      	ldr	r3, [pc, #456]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a71      	ldr	r2, [pc, #452]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 8003924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b6f      	ldr	r3, [pc, #444]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a6e      	ldr	r2, [pc, #440]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e00b      	b.n	8003950 <HAL_RCC_OscConfig+0xd4>
 8003938:	4b6b      	ldr	r3, [pc, #428]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a6a      	ldr	r2, [pc, #424]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 800393e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b68      	ldr	r3, [pc, #416]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a67      	ldr	r2, [pc, #412]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 800394a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800394e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d013      	beq.n	8003980 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fe ffb4 	bl	80028c4 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003960:	f7fe ffb0 	bl	80028c4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	; 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e292      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b5d      	ldr	r3, [pc, #372]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0xe4>
 800397e:	e014      	b.n	80039aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fe ffa0 	bl	80028c4 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003988:	f7fe ff9c 	bl	80028c4 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e27e      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	4b53      	ldr	r3, [pc, #332]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x10c>
 80039a6:	e000      	b.n	80039aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d063      	beq.n	8003a7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039b6:	4b4c      	ldr	r3, [pc, #304]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00b      	beq.n	80039da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039c2:	4b49      	ldr	r3, [pc, #292]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d11c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x18c>
 80039ce:	4b46      	ldr	r3, [pc, #280]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d116      	bne.n	8003a08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039da:	4b43      	ldr	r3, [pc, #268]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_RCC_OscConfig+0x176>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d001      	beq.n	80039f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e252      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f2:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4939      	ldr	r1, [pc, #228]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	e03a      	b.n	8003a7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d020      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a10:	4b36      	ldr	r3, [pc, #216]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a16:	f7fe ff55 	bl	80028c4 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a1e:	f7fe ff51 	bl	80028c4 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e233      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	4b2d      	ldr	r3, [pc, #180]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4927      	ldr	r1, [pc, #156]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]
 8003a50:	e015      	b.n	8003a7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fe ff34 	bl	80028c4 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a60:	f7fe ff30 	bl	80028c4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e212      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d03a      	beq.n	8003b00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d019      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a92:	4b17      	ldr	r3, [pc, #92]	; (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a98:	f7fe ff14 	bl	80028c4 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa0:	f7fe ff10 	bl	80028c4 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1f2      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f000 fbf2 	bl	80042a8 <RCC_Delay>
 8003ac4:	e01c      	b.n	8003b00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003acc:	f7fe fefa 	bl	80028c4 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad2:	e00f      	b.n	8003af4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad4:	f7fe fef6 	bl	80028c4 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d908      	bls.n	8003af4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1d8      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	42420000 	.word	0x42420000
 8003af0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af4:	4b9b      	ldr	r3, [pc, #620]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e9      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80a6 	beq.w	8003c5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b12:	4b94      	ldr	r3, [pc, #592]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10d      	bne.n	8003b3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1e:	4b91      	ldr	r3, [pc, #580]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4a90      	ldr	r2, [pc, #576]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b28:	61d3      	str	r3, [r2, #28]
 8003b2a:	4b8e      	ldr	r3, [pc, #568]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3a:	4b8b      	ldr	r3, [pc, #556]	; (8003d68 <HAL_RCC_OscConfig+0x4ec>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d118      	bne.n	8003b78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b46:	4b88      	ldr	r3, [pc, #544]	; (8003d68 <HAL_RCC_OscConfig+0x4ec>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a87      	ldr	r2, [pc, #540]	; (8003d68 <HAL_RCC_OscConfig+0x4ec>)
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b52:	f7fe feb7 	bl	80028c4 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5a:	f7fe feb3 	bl	80028c4 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b64      	cmp	r3, #100	; 0x64
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e195      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	4b7e      	ldr	r3, [pc, #504]	; (8003d68 <HAL_RCC_OscConfig+0x4ec>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d106      	bne.n	8003b8e <HAL_RCC_OscConfig+0x312>
 8003b80:	4b78      	ldr	r3, [pc, #480]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4a77      	ldr	r2, [pc, #476]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6213      	str	r3, [r2, #32]
 8003b8c:	e02d      	b.n	8003bea <HAL_RCC_OscConfig+0x36e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x334>
 8003b96:	4b73      	ldr	r3, [pc, #460]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4a72      	ldr	r2, [pc, #456]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	6213      	str	r3, [r2, #32]
 8003ba2:	4b70      	ldr	r3, [pc, #448]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	4a6f      	ldr	r2, [pc, #444]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003ba8:	f023 0304 	bic.w	r3, r3, #4
 8003bac:	6213      	str	r3, [r2, #32]
 8003bae:	e01c      	b.n	8003bea <HAL_RCC_OscConfig+0x36e>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	2b05      	cmp	r3, #5
 8003bb6:	d10c      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x356>
 8003bb8:	4b6a      	ldr	r3, [pc, #424]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	4a69      	ldr	r2, [pc, #420]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003bbe:	f043 0304 	orr.w	r3, r3, #4
 8003bc2:	6213      	str	r3, [r2, #32]
 8003bc4:	4b67      	ldr	r3, [pc, #412]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	4a66      	ldr	r2, [pc, #408]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6213      	str	r3, [r2, #32]
 8003bd0:	e00b      	b.n	8003bea <HAL_RCC_OscConfig+0x36e>
 8003bd2:	4b64      	ldr	r3, [pc, #400]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	4a63      	ldr	r2, [pc, #396]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	6213      	str	r3, [r2, #32]
 8003bde:	4b61      	ldr	r3, [pc, #388]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	4a60      	ldr	r2, [pc, #384]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d015      	beq.n	8003c1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf2:	f7fe fe67 	bl	80028c4 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf8:	e00a      	b.n	8003c10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfa:	f7fe fe63 	bl	80028c4 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e143      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c10:	4b54      	ldr	r3, [pc, #336]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0ee      	beq.n	8003bfa <HAL_RCC_OscConfig+0x37e>
 8003c1c:	e014      	b.n	8003c48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe fe51 	bl	80028c4 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c24:	e00a      	b.n	8003c3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c26:	f7fe fe4d 	bl	80028c4 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e12d      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3c:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1ee      	bne.n	8003c26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d105      	bne.n	8003c5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4e:	4b45      	ldr	r3, [pc, #276]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	4a44      	ldr	r2, [pc, #272]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c58:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 808c 	beq.w	8003d7c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003c64:	4b3f      	ldr	r3, [pc, #252]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c70:	d10e      	bne.n	8003c90 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003c72:	4b3c      	ldr	r3, [pc, #240]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d108      	bne.n	8003c90 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003c7e:	4b39      	ldr	r3, [pc, #228]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e103      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d14e      	bne.n	8003d36 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003c98:	4b32      	ldr	r3, [pc, #200]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d009      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003ca4:	4b2f      	ldr	r3, [pc, #188]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0ef      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003cb8:	4b2c      	ldr	r3, [pc, #176]	; (8003d6c <HAL_RCC_OscConfig+0x4f0>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fe fe01 	bl	80028c4 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003cc6:	f7fe fdfd 	bl	80028c4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b64      	cmp	r3, #100	; 0x64
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e0df      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003cd8:	4b22      	ldr	r3, [pc, #136]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003ce4:	4b1f      	ldr	r3, [pc, #124]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	491c      	ldr	r1, [pc, #112]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	4918      	ldr	r1, [pc, #96]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003d08:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <HAL_RCC_OscConfig+0x4f0>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0e:	f7fe fdd9 	bl	80028c4 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d16:	f7fe fdd5 	bl	80028c4 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b64      	cmp	r3, #100	; 0x64
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e0b7      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003d28:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x49a>
 8003d34:	e022      	b.n	8003d7c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <HAL_RCC_OscConfig+0x4e8>)
 8003d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <HAL_RCC_OscConfig+0x4f0>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fe fdbc 	bl	80028c4 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003d4e:	e00f      	b.n	8003d70 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d50:	f7fe fdb8 	bl	80028c4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b64      	cmp	r3, #100	; 0x64
 8003d5c:	d908      	bls.n	8003d70 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e09a      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003d70:	4b4b      	ldr	r3, [pc, #300]	; (8003ea0 <HAL_RCC_OscConfig+0x624>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e9      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8088 	beq.w	8003e96 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d86:	4b46      	ldr	r3, [pc, #280]	; (8003ea0 <HAL_RCC_OscConfig+0x624>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d068      	beq.n	8003e64 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d14d      	bne.n	8003e36 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9a:	4b42      	ldr	r3, [pc, #264]	; (8003ea4 <HAL_RCC_OscConfig+0x628>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fe fd90 	bl	80028c4 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da8:	f7fe fd8c 	bl	80028c4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e06e      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dba:	4b39      	ldr	r3, [pc, #228]	; (8003ea0 <HAL_RCC_OscConfig+0x624>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dce:	d10f      	bne.n	8003df0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003dd0:	4b33      	ldr	r3, [pc, #204]	; (8003ea0 <HAL_RCC_OscConfig+0x624>)
 8003dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4931      	ldr	r1, [pc, #196]	; (8003ea0 <HAL_RCC_OscConfig+0x624>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dde:	4b30      	ldr	r3, [pc, #192]	; (8003ea0 <HAL_RCC_OscConfig+0x624>)
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	f023 020f 	bic.w	r2, r3, #15
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	492d      	ldr	r1, [pc, #180]	; (8003ea0 <HAL_RCC_OscConfig+0x624>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df0:	4b2b      	ldr	r3, [pc, #172]	; (8003ea0 <HAL_RCC_OscConfig+0x624>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	430b      	orrs	r3, r1
 8003e02:	4927      	ldr	r1, [pc, #156]	; (8003ea0 <HAL_RCC_OscConfig+0x624>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e08:	4b26      	ldr	r3, [pc, #152]	; (8003ea4 <HAL_RCC_OscConfig+0x628>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0e:	f7fe fd59 	bl	80028c4 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e16:	f7fe fd55 	bl	80028c4 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e037      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e28:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_RCC_OscConfig+0x624>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0x59a>
 8003e34:	e02f      	b.n	8003e96 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e36:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <HAL_RCC_OscConfig+0x628>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fd42 	bl	80028c4 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fe fd3e 	bl	80028c4 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e020      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e56:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <HAL_RCC_OscConfig+0x624>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x5c8>
 8003e62:	e018      	b.n	8003e96 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e013      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCC_OscConfig+0x624>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d106      	bne.n	8003e92 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d001      	beq.n	8003e96 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	42420060 	.word	0x42420060

08003ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0d0      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b6a      	ldr	r3, [pc, #424]	; (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d910      	bls.n	8003eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b67      	ldr	r3, [pc, #412]	; (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 0207 	bic.w	r2, r3, #7
 8003ed2:	4965      	ldr	r1, [pc, #404]	; (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b63      	ldr	r3, [pc, #396]	; (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0b8      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f04:	4b59      	ldr	r3, [pc, #356]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4a58      	ldr	r2, [pc, #352]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f1c:	4b53      	ldr	r3, [pc, #332]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4a52      	ldr	r2, [pc, #328]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f28:	4b50      	ldr	r3, [pc, #320]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	494d      	ldr	r1, [pc, #308]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d040      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4e:	4b47      	ldr	r3, [pc, #284]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d115      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e07f      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f66:	4b41      	ldr	r3, [pc, #260]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e073      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f76:	4b3d      	ldr	r3, [pc, #244]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e06b      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b39      	ldr	r3, [pc, #228]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4936      	ldr	r1, [pc, #216]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f98:	f7fe fc94 	bl	80028c4 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fe fc90 	bl	80028c4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e053      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b2d      	ldr	r3, [pc, #180]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b27      	ldr	r3, [pc, #156]	; (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d210      	bcs.n	8003ff8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 0207 	bic.w	r2, r3, #7
 8003fde:	4922      	ldr	r1, [pc, #136]	; (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e032      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004004:	4b19      	ldr	r3, [pc, #100]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4916      	ldr	r1, [pc, #88]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	490e      	ldr	r1, [pc, #56]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004036:	f000 f821 	bl	800407c <HAL_RCC_GetSysClockFreq>
 800403a:	4601      	mov	r1, r0
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8004048:	5cd3      	ldrb	r3, [r2, r3]
 800404a:	fa21 f303 	lsr.w	r3, r1, r3
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <HAL_RCC_ClockConfig+0x1cc>)
 8004050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <HAL_RCC_ClockConfig+0x1d0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fbf2 	bl	8002840 <HAL_InitTick>

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40022000 	.word	0x40022000
 800406c:	40021000 	.word	0x40021000
 8004070:	08006808 	.word	0x08006808
 8004074:	20000020 	.word	0x20000020
 8004078:	20000024 	.word	0x20000024

0800407c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800407c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004080:	b091      	sub	sp, #68	; 0x44
 8004082:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8004084:	4b6a      	ldr	r3, [pc, #424]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8004086:	f107 0414 	add.w	r4, r7, #20
 800408a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800408c:	c407      	stmia	r4!, {r0, r1, r2}
 800408e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8004090:	4b68      	ldr	r3, [pc, #416]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004092:	1d3c      	adds	r4, r7, #4
 8004094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	637b      	str	r3, [r7, #52]	; 0x34
 800409e:	2300      	movs	r3, #0
 80040a0:	633b      	str	r3, [r7, #48]	; 0x30
 80040a2:	2300      	movs	r3, #0
 80040a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a6:	2300      	movs	r3, #0
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b2:	2300      	movs	r3, #0
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040b6:	4b60      	ldr	r3, [pc, #384]	; (8004238 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d002      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0x50>
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d003      	beq.n	80040d2 <HAL_RCC_GetSysClockFreq+0x56>
 80040ca:	e0a7      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040cc:	4b5b      	ldr	r3, [pc, #364]	; (800423c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80040ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040d0:	e0a7      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d4:	0c9b      	lsrs	r3, r3, #18
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80040de:	4413      	add	r3, r2
 80040e0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 808d 	beq.w	800420c <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80040f2:	4b51      	ldr	r3, [pc, #324]	; (8004238 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80040fe:	4413      	add	r3, r2
 8004100:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8004104:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004106:	4b4c      	ldr	r3, [pc, #304]	; (8004238 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d06a      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004112:	4b49      	ldr	r3, [pc, #292]	; (8004238 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	3301      	adds	r3, #1
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004120:	4b45      	ldr	r3, [pc, #276]	; (8004238 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	0a1b      	lsrs	r3, r3, #8
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	3302      	adds	r3, #2
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	4619      	mov	r1, r3
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004138:	f04f 0400 	mov.w	r4, #0
 800413c:	fb03 f502 	mul.w	r5, r3, r2
 8004140:	fb01 f004 	mul.w	r0, r1, r4
 8004144:	4428      	add	r0, r5
 8004146:	fba1 5603 	umull	r5, r6, r1, r3
 800414a:	1983      	adds	r3, r0, r6
 800414c:	461e      	mov	r6, r3
 800414e:	4629      	mov	r1, r5
 8004150:	4632      	mov	r2, r6
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	f04f 0400 	mov.w	r4, #0
 800415a:	0154      	lsls	r4, r2, #5
 800415c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004160:	014b      	lsls	r3, r1, #5
 8004162:	4619      	mov	r1, r3
 8004164:	4622      	mov	r2, r4
 8004166:	1b49      	subs	r1, r1, r5
 8004168:	eb62 0206 	sbc.w	r2, r2, r6
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	f04f 0400 	mov.w	r4, #0
 8004174:	0194      	lsls	r4, r2, #6
 8004176:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800417a:	018b      	lsls	r3, r1, #6
 800417c:	1a5b      	subs	r3, r3, r1
 800417e:	eb64 0402 	sbc.w	r4, r4, r2
 8004182:	f04f 0100 	mov.w	r1, #0
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	00e2      	lsls	r2, r4, #3
 800418c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004190:	00d9      	lsls	r1, r3, #3
 8004192:	460b      	mov	r3, r1
 8004194:	4614      	mov	r4, r2
 8004196:	195b      	adds	r3, r3, r5
 8004198:	eb44 0406 	adc.w	r4, r4, r6
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	0262      	lsls	r2, r4, #9
 80041a6:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80041aa:	0259      	lsls	r1, r3, #9
 80041ac:	460b      	mov	r3, r1
 80041ae:	4614      	mov	r4, r2
 80041b0:	4698      	mov	r8, r3
 80041b2:	46a1      	mov	r9, r4
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	4619      	mov	r1, r3
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	f04f 0400 	mov.w	r4, #0
 80041c2:	fb03 f502 	mul.w	r5, r3, r2
 80041c6:	fb01 f004 	mul.w	r0, r1, r4
 80041ca:	4428      	add	r0, r5
 80041cc:	fba1 3403 	umull	r3, r4, r1, r3
 80041d0:	1902      	adds	r2, r0, r4
 80041d2:	4614      	mov	r4, r2
 80041d4:	461a      	mov	r2, r3
 80041d6:	4623      	mov	r3, r4
 80041d8:	4640      	mov	r0, r8
 80041da:	4649      	mov	r1, r9
 80041dc:	f7fc ffd4 	bl	8001188 <__aeabi_uldivmod>
 80041e0:	4603      	mov	r3, r0
 80041e2:	460c      	mov	r4, r1
 80041e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e6:	e007      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	4a14      	ldr	r2, [pc, #80]	; (800423c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80041ec:	fb02 f203 	mul.w	r2, r2, r3
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80041f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80041fc:	461a      	mov	r2, r3
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	4293      	cmp	r3, r2
 8004202:	d108      	bne.n	8004216 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 8004204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800420a:	e004      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800420c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420e:	4a0c      	ldr	r2, [pc, #48]	; (8004240 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8004210:	fb02 f303 	mul.w	r3, r2, r3
 8004214:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8004216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004218:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800421a:	e002      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800421c:	4b07      	ldr	r3, [pc, #28]	; (800423c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800421e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004224:	4618      	mov	r0, r3
 8004226:	3744      	adds	r7, #68	; 0x44
 8004228:	46bd      	mov	sp, r7
 800422a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800422e:	bf00      	nop
 8004230:	080067e8 	.word	0x080067e8
 8004234:	080067f8 	.word	0x080067f8
 8004238:	40021000 	.word	0x40021000
 800423c:	007a1200 	.word	0x007a1200
 8004240:	003d0900 	.word	0x003d0900

08004244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004248:	4b02      	ldr	r3, [pc, #8]	; (8004254 <HAL_RCC_GetHCLKFreq+0x10>)
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	20000020 	.word	0x20000020

08004258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800425c:	f7ff fff2 	bl	8004244 <HAL_RCC_GetHCLKFreq>
 8004260:	4601      	mov	r1, r0
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	4a03      	ldr	r2, [pc, #12]	; (800427c <HAL_RCC_GetPCLK1Freq+0x24>)
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004274:	4618      	mov	r0, r3
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40021000 	.word	0x40021000
 800427c:	08006818 	.word	0x08006818

08004280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004284:	f7ff ffde 	bl	8004244 <HAL_RCC_GetHCLKFreq>
 8004288:	4601      	mov	r1, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	0adb      	lsrs	r3, r3, #11
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4a03      	ldr	r2, [pc, #12]	; (80042a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004296:	5cd3      	ldrb	r3, [r2, r3]
 8004298:	fa21 f303 	lsr.w	r3, r1, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40021000 	.word	0x40021000
 80042a4:	08006818 	.word	0x08006818

080042a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <RCC_Delay+0x34>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <RCC_Delay+0x38>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	0a5b      	lsrs	r3, r3, #9
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	fb02 f303 	mul.w	r3, r2, r3
 80042c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042c4:	bf00      	nop
  }
  while (Delay --);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1e5a      	subs	r2, r3, #1
 80042ca:	60fa      	str	r2, [r7, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f9      	bne.n	80042c4 <RCC_Delay+0x1c>
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000020 	.word	0x20000020
 80042e0:	10624dd3 	.word	0x10624dd3

080042e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d07d      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004304:	2300      	movs	r3, #0
 8004306:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004308:	4b8b      	ldr	r3, [pc, #556]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10d      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004314:	4b88      	ldr	r3, [pc, #544]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	4a87      	ldr	r2, [pc, #540]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800431a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431e:	61d3      	str	r3, [r2, #28]
 8004320:	4b85      	ldr	r3, [pc, #532]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800432c:	2301      	movs	r3, #1
 800432e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004330:	4b82      	ldr	r3, [pc, #520]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d118      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800433c:	4b7f      	ldr	r3, [pc, #508]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a7e      	ldr	r2, [pc, #504]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004346:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004348:	f7fe fabc 	bl	80028c4 <HAL_GetTick>
 800434c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434e:	e008      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004350:	f7fe fab8 	bl	80028c4 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	; 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e0e5      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	4b76      	ldr	r3, [pc, #472]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800436e:	4b72      	ldr	r3, [pc, #456]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d02e      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	429a      	cmp	r2, r3
 800438a:	d027      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800438c:	4b6a      	ldr	r3, [pc, #424]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004394:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004396:	4b6a      	ldr	r3, [pc, #424]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004398:	2201      	movs	r2, #1
 800439a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800439c:	4b68      	ldr	r3, [pc, #416]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043a2:	4a65      	ldr	r2, [pc, #404]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d014      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b2:	f7fe fa87 	bl	80028c4 <HAL_GetTick>
 80043b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b8:	e00a      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ba:	f7fe fa83 	bl	80028c4 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e0ae      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d0:	4b59      	ldr	r3, [pc, #356]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0ee      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043dc:	4b56      	ldr	r3, [pc, #344]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4953      	ldr	r1, [pc, #332]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043ee:	7efb      	ldrb	r3, [r7, #27]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d105      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f4:	4b50      	ldr	r3, [pc, #320]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	4a4f      	ldr	r2, [pc, #316]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800440c:	4b4a      	ldr	r3, [pc, #296]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4947      	ldr	r1, [pc, #284]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	d008      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800442a:	4b43      	ldr	r3, [pc, #268]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	4940      	ldr	r1, [pc, #256]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004438:	4313      	orrs	r3, r2
 800443a:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8004448:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	4938      	ldr	r1, [pc, #224]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004456:	4313      	orrs	r3, r2
 8004458:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800445a:	4b37      	ldr	r3, [pc, #220]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d105      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004466:	4b34      	ldr	r3, [pc, #208]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8004472:	2301      	movs	r3, #1
 8004474:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d148      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 800447c:	4b2e      	ldr	r3, [pc, #184]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d138      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004488:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d009      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8004494:	4b28      	ldr	r3, [pc, #160]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d001      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e042      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80044a8:	4b23      	ldr	r3, [pc, #140]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	4920      	ldr	r1, [pc, #128]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80044ba:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	491c      	ldr	r1, [pc, #112]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80044cc:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d2:	f7fe f9f7 	bl	80028c4 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044da:	f7fe f9f3 	bl	80028c4 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b64      	cmp	r3, #100	; 0x64
 80044e6:	d901      	bls.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e020      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044ec:	4b12      	ldr	r3, [pc, #72]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80044f8:	e009      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80044fa:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	429a      	cmp	r2, r3
 8004508:	d001      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e00f      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800451a:	4b07      	ldr	r3, [pc, #28]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	4904      	ldr	r1, [pc, #16]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004528:	4313      	orrs	r3, r2
 800452a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000
 800453c:	40007000 	.word	0x40007000
 8004540:	42420440 	.word	0x42420440
 8004544:	42420070 	.word	0x42420070

08004548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e01d      	b.n	8004596 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fd ff7e 	bl	8002470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f000 f9ee 	bl	8004968 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e01d      	b.n	80045ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f815 	bl	80045f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2202      	movs	r2, #2
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3304      	adds	r3, #4
 80045da:	4619      	mov	r1, r3
 80045dc:	4610      	mov	r0, r2
 80045de:	f000 f9c3 	bl	8004968 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr
	...

08004608 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2201      	movs	r2, #1
 8004618:	6839      	ldr	r1, [r7, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fc2e 	bl	8004e7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a10      	ldr	r2, [pc, #64]	; (8004668 <HAL_TIM_PWM_Start+0x60>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d107      	bne.n	800463a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b06      	cmp	r3, #6
 800464a:	d007      	beq.n	800465c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40012c00 	.word	0x40012c00

0800466c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004682:	2302      	movs	r3, #2
 8004684:	e0b4      	b.n	80047f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2202      	movs	r2, #2
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b0c      	cmp	r3, #12
 800469a:	f200 809f 	bhi.w	80047dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800469e:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046d9 	.word	0x080046d9
 80046a8:	080047dd 	.word	0x080047dd
 80046ac:	080047dd 	.word	0x080047dd
 80046b0:	080047dd 	.word	0x080047dd
 80046b4:	08004719 	.word	0x08004719
 80046b8:	080047dd 	.word	0x080047dd
 80046bc:	080047dd 	.word	0x080047dd
 80046c0:	080047dd 	.word	0x080047dd
 80046c4:	0800475b 	.word	0x0800475b
 80046c8:	080047dd 	.word	0x080047dd
 80046cc:	080047dd 	.word	0x080047dd
 80046d0:	080047dd 	.word	0x080047dd
 80046d4:	0800479b 	.word	0x0800479b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f9ae 	bl	8004a40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0208 	orr.w	r2, r2, #8
 80046f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0204 	bic.w	r2, r2, #4
 8004702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6999      	ldr	r1, [r3, #24]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	619a      	str	r2, [r3, #24]
      break;
 8004716:	e062      	b.n	80047de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f9f4 	bl	8004b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6999      	ldr	r1, [r3, #24]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	021a      	lsls	r2, r3, #8
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	619a      	str	r2, [r3, #24]
      break;
 8004758:	e041      	b.n	80047de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fa3d 	bl	8004be0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0208 	orr.w	r2, r2, #8
 8004774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0204 	bic.w	r2, r2, #4
 8004784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69d9      	ldr	r1, [r3, #28]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	61da      	str	r2, [r3, #28]
      break;
 8004798:	e021      	b.n	80047de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fa87 	bl	8004cb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69d9      	ldr	r1, [r3, #28]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	021a      	lsls	r2, r3, #8
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	61da      	str	r2, [r3, #28]
      break;
 80047da:	e000      	b.n	80047de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80047dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_TIM_ConfigClockSource+0x18>
 800480c:	2302      	movs	r3, #2
 800480e:	e0a6      	b.n	800495e <HAL_TIM_ConfigClockSource+0x166>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800482e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004836:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b40      	cmp	r3, #64	; 0x40
 8004846:	d067      	beq.n	8004918 <HAL_TIM_ConfigClockSource+0x120>
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d80b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x6c>
 800484c:	2b10      	cmp	r3, #16
 800484e:	d073      	beq.n	8004938 <HAL_TIM_ConfigClockSource+0x140>
 8004850:	2b10      	cmp	r3, #16
 8004852:	d802      	bhi.n	800485a <HAL_TIM_ConfigClockSource+0x62>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d06f      	beq.n	8004938 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004858:	e078      	b.n	800494c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800485a:	2b20      	cmp	r3, #32
 800485c:	d06c      	beq.n	8004938 <HAL_TIM_ConfigClockSource+0x140>
 800485e:	2b30      	cmp	r3, #48	; 0x30
 8004860:	d06a      	beq.n	8004938 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004862:	e073      	b.n	800494c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004864:	2b70      	cmp	r3, #112	; 0x70
 8004866:	d00d      	beq.n	8004884 <HAL_TIM_ConfigClockSource+0x8c>
 8004868:	2b70      	cmp	r3, #112	; 0x70
 800486a:	d804      	bhi.n	8004876 <HAL_TIM_ConfigClockSource+0x7e>
 800486c:	2b50      	cmp	r3, #80	; 0x50
 800486e:	d033      	beq.n	80048d8 <HAL_TIM_ConfigClockSource+0xe0>
 8004870:	2b60      	cmp	r3, #96	; 0x60
 8004872:	d041      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004874:	e06a      	b.n	800494c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487a:	d066      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x152>
 800487c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004880:	d017      	beq.n	80048b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004882:	e063      	b.n	800494c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	6899      	ldr	r1, [r3, #8]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f000 fad3 	bl	8004e3e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	609a      	str	r2, [r3, #8]
      break;
 80048b0:	e04c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6899      	ldr	r1, [r3, #8]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f000 fabc 	bl	8004e3e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048d4:	609a      	str	r2, [r3, #8]
      break;
 80048d6:	e039      	b.n	800494c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6859      	ldr	r1, [r3, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	461a      	mov	r2, r3
 80048e6:	f000 fa33 	bl	8004d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2150      	movs	r1, #80	; 0x50
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fa8a 	bl	8004e0a <TIM_ITRx_SetConfig>
      break;
 80048f6:	e029      	b.n	800494c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	461a      	mov	r2, r3
 8004906:	f000 fa51 	bl	8004dac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2160      	movs	r1, #96	; 0x60
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fa7a 	bl	8004e0a <TIM_ITRx_SetConfig>
      break;
 8004916:	e019      	b.n	800494c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6859      	ldr	r1, [r3, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	461a      	mov	r2, r3
 8004926:	f000 fa13 	bl	8004d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2140      	movs	r1, #64	; 0x40
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fa6a 	bl	8004e0a <TIM_ITRx_SetConfig>
      break;
 8004936:	e009      	b.n	800494c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f000 fa61 	bl	8004e0a <TIM_ITRx_SetConfig>
      break;
 8004948:	e000      	b.n	800494c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800494a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a2d      	ldr	r2, [pc, #180]	; (8004a30 <TIM_Base_SetConfig+0xc8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00f      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004986:	d00b      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <TIM_Base_SetConfig+0xcc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d007      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a29      	ldr	r2, [pc, #164]	; (8004a38 <TIM_Base_SetConfig+0xd0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a28      	ldr	r2, [pc, #160]	; (8004a3c <TIM_Base_SetConfig+0xd4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d108      	bne.n	80049b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a1e      	ldr	r2, [pc, #120]	; (8004a30 <TIM_Base_SetConfig+0xc8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00f      	beq.n	80049da <TIM_Base_SetConfig+0x72>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c0:	d00b      	beq.n	80049da <TIM_Base_SetConfig+0x72>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <TIM_Base_SetConfig+0xcc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d007      	beq.n	80049da <TIM_Base_SetConfig+0x72>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <TIM_Base_SetConfig+0xd0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_Base_SetConfig+0x72>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <TIM_Base_SetConfig+0xd4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d108      	bne.n	80049ec <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a07      	ldr	r2, [pc, #28]	; (8004a30 <TIM_Base_SetConfig+0xc8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d103      	bne.n	8004a20 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	615a      	str	r2, [r3, #20]
}
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	40012c00 	.word	0x40012c00
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40000800 	.word	0x40000800
 8004a3c:	40000c00 	.word	0x40000c00

08004a40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0201 	bic.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0303 	bic.w	r3, r3, #3
 8004a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f023 0302 	bic.w	r3, r3, #2
 8004a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <TIM_OC1_SetConfig+0xc8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d10c      	bne.n	8004ab6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f023 0308 	bic.w	r3, r3, #8
 8004aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f023 0304 	bic.w	r3, r3, #4
 8004ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <TIM_OC1_SetConfig+0xc8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d111      	bne.n	8004ae2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	621a      	str	r2, [r3, #32]
}
 8004afc:	bf00      	nop
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40012c00 	.word	0x40012c00

08004b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f023 0210 	bic.w	r2, r3, #16
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 0320 	bic.w	r3, r3, #32
 8004b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a1d      	ldr	r2, [pc, #116]	; (8004bdc <TIM_OC2_SetConfig+0xd0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d10d      	bne.n	8004b88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a14      	ldr	r2, [pc, #80]	; (8004bdc <TIM_OC2_SetConfig+0xd0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d113      	bne.n	8004bb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	621a      	str	r2, [r3, #32]
}
 8004bd2:	bf00      	nop
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	40012c00 	.word	0x40012c00

08004be0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0303 	bic.w	r3, r3, #3
 8004c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a1d      	ldr	r2, [pc, #116]	; (8004cb0 <TIM_OC3_SetConfig+0xd0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d10d      	bne.n	8004c5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a14      	ldr	r2, [pc, #80]	; (8004cb0 <TIM_OC3_SetConfig+0xd0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d113      	bne.n	8004c8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	621a      	str	r2, [r3, #32]
}
 8004ca4:	bf00      	nop
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40012c00 	.word	0x40012c00

08004cb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	031b      	lsls	r3, r3, #12
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a0f      	ldr	r2, [pc, #60]	; (8004d4c <TIM_OC4_SetConfig+0x98>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d109      	bne.n	8004d28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	019b      	lsls	r3, r3, #6
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr
 8004d4c:	40012c00 	.word	0x40012c00

08004d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f023 0201 	bic.w	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f023 030a 	bic.w	r3, r3, #10
 8004d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	621a      	str	r2, [r3, #32]
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f023 0210 	bic.w	r2, r3, #16
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	031b      	lsls	r3, r3, #12
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004de8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	621a      	str	r2, [r3, #32]
}
 8004e00:	bf00      	nop
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f043 0307 	orr.w	r3, r3, #7
 8004e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	609a      	str	r2, [r3, #8]
}
 8004e34:	bf00      	nop
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr

08004e3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b087      	sub	sp, #28
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	021a      	lsls	r2, r3, #8
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	609a      	str	r2, [r3, #8]
}
 8004e72:	bf00      	nop
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	2201      	movs	r2, #1
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1a      	ldr	r2, [r3, #32]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a1a      	ldr	r2, [r3, #32]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f003 031f 	and.w	r3, r3, #31
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e032      	b.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f14:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr

08004f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e03f      	b.n	8004fde <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fd fb58 	bl	8002628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2224      	movs	r2, #36	; 0x24
 8004f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fae5 	bl	8005560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d130      	bne.n	8005062 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <HAL_UART_Transmit_IT+0x26>
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e029      	b.n	8005064 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_UART_Transmit_IT+0x38>
 800501a:	2302      	movs	r3, #2
 800501c:	e022      	b.n	8005064 <HAL_UART_Transmit_IT+0x7e>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	88fa      	ldrh	r2, [r7, #6]
 8005030:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	88fa      	ldrh	r2, [r7, #6]
 8005036:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2221      	movs	r2, #33	; 0x21
 8005042:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800505c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e000      	b.n	8005064 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005062:	2302      	movs	r3, #2
  }
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr

0800506e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	4613      	mov	r3, r2
 800507a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b20      	cmp	r3, #32
 8005086:	d140      	bne.n	800510a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_UART_Receive_IT+0x26>
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e039      	b.n	800510c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_UART_Receive_IT+0x38>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e032      	b.n	800510c <HAL_UART_Receive_IT+0x9e>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	88fa      	ldrh	r2, [r7, #6]
 80050b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	88fa      	ldrh	r2, [r7, #6]
 80050be:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2222      	movs	r2, #34	; 0x22
 80050ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0220 	orr.w	r2, r2, #32
 8005104:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	e000      	b.n	800510c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800510a:	2302      	movs	r3, #2
  }
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr
	...

08005118 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005138:	2300      	movs	r3, #0
 800513a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10d      	bne.n	800516a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d008      	beq.n	800516a <HAL_UART_IRQHandler+0x52>
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f97b 	bl	800545e <UART_Receive_IT>
      return;
 8005168:	e0cc      	b.n	8005304 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80ab 	beq.w	80052c8 <HAL_UART_IRQHandler+0x1b0>
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d105      	bne.n	8005188 <HAL_UART_IRQHandler+0x70>
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80a0 	beq.w	80052c8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_UART_IRQHandler+0x90>
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a0:	f043 0201 	orr.w	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_UART_IRQHandler+0xb0>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c0:	f043 0202 	orr.w	r2, r3, #2
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_UART_IRQHandler+0xd0>
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e0:	f043 0204 	orr.w	r2, r3, #4
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_UART_IRQHandler+0xf0>
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005200:	f043 0208 	orr.w	r2, r3, #8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d078      	beq.n	8005302 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <HAL_UART_IRQHandler+0x112>
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f91a 	bl	800545e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	bf14      	ite	ne
 8005238:	2301      	movne	r3, #1
 800523a:	2300      	moveq	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <HAL_UART_IRQHandler+0x13a>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d031      	beq.n	80052b6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f865 	bl	8005322 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d023      	beq.n	80052ae <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695a      	ldr	r2, [r3, #20]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005274:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	2b00      	cmp	r3, #0
 800527c:	d013      	beq.n	80052a6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005282:	4a22      	ldr	r2, [pc, #136]	; (800530c <HAL_UART_IRQHandler+0x1f4>)
 8005284:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe f864 	bl	8003358 <HAL_DMA_Abort_IT>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d016      	beq.n	80052c4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052a0:	4610      	mov	r0, r2
 80052a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a4:	e00e      	b.n	80052c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f832 	bl	8005310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ac:	e00a      	b.n	80052c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f82e 	bl	8005310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b4:	e006      	b.n	80052c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f82a 	bl	8005310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80052c2:	e01e      	b.n	8005302 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c4:	bf00      	nop
    return;
 80052c6:	e01c      	b.n	8005302 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d008      	beq.n	80052e4 <HAL_UART_IRQHandler+0x1cc>
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f851 	bl	8005384 <UART_Transmit_IT>
    return;
 80052e2:	e00f      	b.n	8005304 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <HAL_UART_IRQHandler+0x1ec>
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f898 	bl	800542e <UART_EndTransmit_IT>
    return;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005302:	bf00      	nop
  }
}
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	0800535d 	.word	0x0800535d

08005310 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr

08005322 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005338:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695a      	ldr	r2, [r3, #20]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0201 	bic.w	r2, r2, #1
 8005348:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr

0800535c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f7ff ffca 	bl	8005310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b21      	cmp	r3, #33	; 0x21
 8005396:	d144      	bne.n	8005422 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a0:	d11a      	bne.n	80053d8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d105      	bne.n	80053cc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	1c9a      	adds	r2, r3, #2
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	621a      	str	r2, [r3, #32]
 80053ca:	e00e      	b.n	80053ea <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	621a      	str	r2, [r3, #32]
 80053d6:	e008      	b.n	80053ea <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	1c59      	adds	r1, r3, #1
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6211      	str	r1, [r2, #32]
 80053e2:	781a      	ldrb	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	4619      	mov	r1, r3
 80053f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10f      	bne.n	800541e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800540c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800541c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e000      	b.n	8005424 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
  }
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005444:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fc fdfa 	bl	8002048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b22      	cmp	r3, #34	; 0x22
 8005470:	d171      	bne.n	8005556 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547a:	d123      	bne.n	80054c4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10e      	bne.n	80054a8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	1c9a      	adds	r2, r3, #2
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	629a      	str	r2, [r3, #40]	; 0x28
 80054a6:	e029      	b.n	80054fc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	629a      	str	r2, [r3, #40]	; 0x28
 80054c2:	e01b      	b.n	80054fc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6858      	ldr	r0, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	1c59      	adds	r1, r3, #1
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6291      	str	r1, [r2, #40]	; 0x28
 80054dc:	b2c2      	uxtb	r2, r0
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	e00c      	b.n	80054fc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	1c58      	adds	r0, r3, #1
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	6288      	str	r0, [r1, #40]	; 0x28
 80054f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005500:	b29b      	uxth	r3, r3
 8005502:	3b01      	subs	r3, #1
 8005504:	b29b      	uxth	r3, r3
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	4619      	mov	r1, r3
 800550a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800550c:	2b00      	cmp	r3, #0
 800550e:	d120      	bne.n	8005552 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0220 	bic.w	r2, r2, #32
 800551e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800552e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695a      	ldr	r2, [r3, #20]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7fc fdcf 	bl	80020ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	e002      	b.n	8005558 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e000      	b.n	8005558 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005556:	2302      	movs	r3, #2
  }
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800559a:	f023 030c 	bic.w	r3, r3, #12
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	430b      	orrs	r3, r1
 80055a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a52      	ldr	r2, [pc, #328]	; (800570c <UART_SetConfig+0x1ac>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d14e      	bne.n	8005666 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055c8:	f7fe fe5a 	bl	8004280 <HAL_RCC_GetPCLK2Freq>
 80055cc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	009a      	lsls	r2, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e4:	4a4a      	ldr	r2, [pc, #296]	; (8005710 <UART_SetConfig+0x1b0>)
 80055e6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	0119      	lsls	r1, r3, #4
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009a      	lsls	r2, r3, #2
 80055f8:	441a      	add	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	fbb2 f2f3 	udiv	r2, r2, r3
 8005604:	4b42      	ldr	r3, [pc, #264]	; (8005710 <UART_SetConfig+0x1b0>)
 8005606:	fba3 0302 	umull	r0, r3, r3, r2
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	2064      	movs	r0, #100	; 0x64
 800560e:	fb00 f303 	mul.w	r3, r0, r3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	3332      	adds	r3, #50	; 0x32
 8005618:	4a3d      	ldr	r2, [pc, #244]	; (8005710 <UART_SetConfig+0x1b0>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005624:	4419      	add	r1, r3
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	009a      	lsls	r2, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	fbb2 f2f3 	udiv	r2, r2, r3
 800563c:	4b34      	ldr	r3, [pc, #208]	; (8005710 <UART_SetConfig+0x1b0>)
 800563e:	fba3 0302 	umull	r0, r3, r3, r2
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	2064      	movs	r0, #100	; 0x64
 8005646:	fb00 f303 	mul.w	r3, r0, r3
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	3332      	adds	r3, #50	; 0x32
 8005650:	4a2f      	ldr	r2, [pc, #188]	; (8005710 <UART_SetConfig+0x1b0>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	f003 020f 	and.w	r2, r3, #15
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	440a      	add	r2, r1
 8005662:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005664:	e04d      	b.n	8005702 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005666:	f7fe fdf7 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 800566a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	009a      	lsls	r2, r3, #2
 8005676:	441a      	add	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005682:	4a23      	ldr	r2, [pc, #140]	; (8005710 <UART_SetConfig+0x1b0>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	0119      	lsls	r1, r3, #4
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	009a      	lsls	r2, r3, #2
 8005696:	441a      	add	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	fbb2 f2f3 	udiv	r2, r2, r3
 80056a2:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <UART_SetConfig+0x1b0>)
 80056a4:	fba3 0302 	umull	r0, r3, r3, r2
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	2064      	movs	r0, #100	; 0x64
 80056ac:	fb00 f303 	mul.w	r3, r0, r3
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	3332      	adds	r3, #50	; 0x32
 80056b6:	4a16      	ldr	r2, [pc, #88]	; (8005710 <UART_SetConfig+0x1b0>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056c2:	4419      	add	r1, r3
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	009a      	lsls	r2, r3, #2
 80056ce:	441a      	add	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80056da:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <UART_SetConfig+0x1b0>)
 80056dc:	fba3 0302 	umull	r0, r3, r3, r2
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	2064      	movs	r0, #100	; 0x64
 80056e4:	fb00 f303 	mul.w	r3, r0, r3
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	3332      	adds	r3, #50	; 0x32
 80056ee:	4a08      	ldr	r2, [pc, #32]	; (8005710 <UART_SetConfig+0x1b0>)
 80056f0:	fba2 2303 	umull	r2, r3, r2, r3
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	f003 020f 	and.w	r2, r3, #15
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	440a      	add	r2, r1
 8005700:	609a      	str	r2, [r3, #8]
}
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40013800 	.word	0x40013800
 8005710:	51eb851f 	.word	0x51eb851f

08005714 <__libc_init_array>:
 8005714:	b570      	push	{r4, r5, r6, lr}
 8005716:	2500      	movs	r5, #0
 8005718:	4e0c      	ldr	r6, [pc, #48]	; (800574c <__libc_init_array+0x38>)
 800571a:	4c0d      	ldr	r4, [pc, #52]	; (8005750 <__libc_init_array+0x3c>)
 800571c:	1ba4      	subs	r4, r4, r6
 800571e:	10a4      	asrs	r4, r4, #2
 8005720:	42a5      	cmp	r5, r4
 8005722:	d109      	bne.n	8005738 <__libc_init_array+0x24>
 8005724:	f001 f852 	bl	80067cc <_init>
 8005728:	2500      	movs	r5, #0
 800572a:	4e0a      	ldr	r6, [pc, #40]	; (8005754 <__libc_init_array+0x40>)
 800572c:	4c0a      	ldr	r4, [pc, #40]	; (8005758 <__libc_init_array+0x44>)
 800572e:	1ba4      	subs	r4, r4, r6
 8005730:	10a4      	asrs	r4, r4, #2
 8005732:	42a5      	cmp	r5, r4
 8005734:	d105      	bne.n	8005742 <__libc_init_array+0x2e>
 8005736:	bd70      	pop	{r4, r5, r6, pc}
 8005738:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800573c:	4798      	blx	r3
 800573e:	3501      	adds	r5, #1
 8005740:	e7ee      	b.n	8005720 <__libc_init_array+0xc>
 8005742:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005746:	4798      	blx	r3
 8005748:	3501      	adds	r5, #1
 800574a:	e7f2      	b.n	8005732 <__libc_init_array+0x1e>
 800574c:	08006870 	.word	0x08006870
 8005750:	08006870 	.word	0x08006870
 8005754:	08006870 	.word	0x08006870
 8005758:	08006874 	.word	0x08006874

0800575c <memset>:
 800575c:	4603      	mov	r3, r0
 800575e:	4402      	add	r2, r0
 8005760:	4293      	cmp	r3, r2
 8005762:	d100      	bne.n	8005766 <memset+0xa>
 8005764:	4770      	bx	lr
 8005766:	f803 1b01 	strb.w	r1, [r3], #1
 800576a:	e7f9      	b.n	8005760 <memset+0x4>

0800576c <pow>:
 800576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005770:	b08f      	sub	sp, #60	; 0x3c
 8005772:	461d      	mov	r5, r3
 8005774:	4680      	mov	r8, r0
 8005776:	4689      	mov	r9, r1
 8005778:	4614      	mov	r4, r2
 800577a:	f000 f955 	bl	8005a28 <__ieee754_pow>
 800577e:	4fa1      	ldr	r7, [pc, #644]	; (8005a04 <pow+0x298>)
 8005780:	e9cd 0100 	strd	r0, r1, [sp]
 8005784:	f997 3000 	ldrsb.w	r3, [r7]
 8005788:	463e      	mov	r6, r7
 800578a:	9302      	str	r3, [sp, #8]
 800578c:	3301      	adds	r3, #1
 800578e:	d05f      	beq.n	8005850 <pow+0xe4>
 8005790:	4622      	mov	r2, r4
 8005792:	462b      	mov	r3, r5
 8005794:	4620      	mov	r0, r4
 8005796:	4629      	mov	r1, r5
 8005798:	f7fb f99c 	bl	8000ad4 <__aeabi_dcmpun>
 800579c:	4682      	mov	sl, r0
 800579e:	2800      	cmp	r0, #0
 80057a0:	d156      	bne.n	8005850 <pow+0xe4>
 80057a2:	4642      	mov	r2, r8
 80057a4:	464b      	mov	r3, r9
 80057a6:	4640      	mov	r0, r8
 80057a8:	4649      	mov	r1, r9
 80057aa:	f7fb f993 	bl	8000ad4 <__aeabi_dcmpun>
 80057ae:	9003      	str	r0, [sp, #12]
 80057b0:	b1e8      	cbz	r0, 80057ee <pow+0x82>
 80057b2:	2200      	movs	r2, #0
 80057b4:	2300      	movs	r3, #0
 80057b6:	4620      	mov	r0, r4
 80057b8:	4629      	mov	r1, r5
 80057ba:	f7fb f959 	bl	8000a70 <__aeabi_dcmpeq>
 80057be:	2800      	cmp	r0, #0
 80057c0:	d046      	beq.n	8005850 <pow+0xe4>
 80057c2:	2301      	movs	r3, #1
 80057c4:	2200      	movs	r2, #0
 80057c6:	9304      	str	r3, [sp, #16]
 80057c8:	4b8f      	ldr	r3, [pc, #572]	; (8005a08 <pow+0x29c>)
 80057ca:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80057ce:	9305      	str	r3, [sp, #20]
 80057d0:	4b8e      	ldr	r3, [pc, #568]	; (8005a0c <pow+0x2a0>)
 80057d2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80057d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80057da:	9b02      	ldr	r3, [sp, #8]
 80057dc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d031      	beq.n	8005848 <pow+0xdc>
 80057e4:	a804      	add	r0, sp, #16
 80057e6:	f000 fedf 	bl	80065a8 <matherr>
 80057ea:	bb38      	cbnz	r0, 800583c <pow+0xd0>
 80057ec:	e058      	b.n	80058a0 <pow+0x134>
 80057ee:	f04f 0a00 	mov.w	sl, #0
 80057f2:	f04f 0b00 	mov.w	fp, #0
 80057f6:	4652      	mov	r2, sl
 80057f8:	465b      	mov	r3, fp
 80057fa:	4640      	mov	r0, r8
 80057fc:	4649      	mov	r1, r9
 80057fe:	f7fb f937 	bl	8000a70 <__aeabi_dcmpeq>
 8005802:	2800      	cmp	r0, #0
 8005804:	d051      	beq.n	80058aa <pow+0x13e>
 8005806:	4652      	mov	r2, sl
 8005808:	465b      	mov	r3, fp
 800580a:	4620      	mov	r0, r4
 800580c:	4629      	mov	r1, r5
 800580e:	f7fb f92f 	bl	8000a70 <__aeabi_dcmpeq>
 8005812:	4606      	mov	r6, r0
 8005814:	b308      	cbz	r0, 800585a <pow+0xee>
 8005816:	2301      	movs	r3, #1
 8005818:	9304      	str	r3, [sp, #16]
 800581a:	4b7b      	ldr	r3, [pc, #492]	; (8005a08 <pow+0x29c>)
 800581c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005820:	9305      	str	r3, [sp, #20]
 8005822:	9b03      	ldr	r3, [sp, #12]
 8005824:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005828:	930c      	str	r3, [sp, #48]	; 0x30
 800582a:	9b02      	ldr	r3, [sp, #8]
 800582c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0d7      	beq.n	80057e4 <pow+0x78>
 8005834:	2200      	movs	r2, #0
 8005836:	4b75      	ldr	r3, [pc, #468]	; (8005a0c <pow+0x2a0>)
 8005838:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800583c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800583e:	b11b      	cbz	r3, 8005848 <pow+0xdc>
 8005840:	f000 ffbe 	bl	80067c0 <__errno>
 8005844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005846:	6003      	str	r3, [r0, #0]
 8005848:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800584c:	e9cd 3400 	strd	r3, r4, [sp]
 8005850:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005854:	b00f      	add	sp, #60	; 0x3c
 8005856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585a:	4620      	mov	r0, r4
 800585c:	4629      	mov	r1, r5
 800585e:	f000 fe9d 	bl	800659c <finite>
 8005862:	2800      	cmp	r0, #0
 8005864:	d0f4      	beq.n	8005850 <pow+0xe4>
 8005866:	4652      	mov	r2, sl
 8005868:	465b      	mov	r3, fp
 800586a:	4620      	mov	r0, r4
 800586c:	4629      	mov	r1, r5
 800586e:	f7fb f909 	bl	8000a84 <__aeabi_dcmplt>
 8005872:	2800      	cmp	r0, #0
 8005874:	d0ec      	beq.n	8005850 <pow+0xe4>
 8005876:	2301      	movs	r3, #1
 8005878:	9304      	str	r3, [sp, #16]
 800587a:	4b63      	ldr	r3, [pc, #396]	; (8005a08 <pow+0x29c>)
 800587c:	960c      	str	r6, [sp, #48]	; 0x30
 800587e:	9305      	str	r3, [sp, #20]
 8005880:	f997 3000 	ldrsb.w	r3, [r7]
 8005884:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005888:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800588c:	b913      	cbnz	r3, 8005894 <pow+0x128>
 800588e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005892:	e7a7      	b.n	80057e4 <pow+0x78>
 8005894:	2000      	movs	r0, #0
 8005896:	495e      	ldr	r1, [pc, #376]	; (8005a10 <pow+0x2a4>)
 8005898:	2b02      	cmp	r3, #2
 800589a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800589e:	d1a1      	bne.n	80057e4 <pow+0x78>
 80058a0:	f000 ff8e 	bl	80067c0 <__errno>
 80058a4:	2321      	movs	r3, #33	; 0x21
 80058a6:	6003      	str	r3, [r0, #0]
 80058a8:	e7c8      	b.n	800583c <pow+0xd0>
 80058aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ae:	f000 fe75 	bl	800659c <finite>
 80058b2:	9002      	str	r0, [sp, #8]
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d177      	bne.n	80059a8 <pow+0x23c>
 80058b8:	4640      	mov	r0, r8
 80058ba:	4649      	mov	r1, r9
 80058bc:	f000 fe6e 	bl	800659c <finite>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d071      	beq.n	80059a8 <pow+0x23c>
 80058c4:	4620      	mov	r0, r4
 80058c6:	4629      	mov	r1, r5
 80058c8:	f000 fe68 	bl	800659c <finite>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d06b      	beq.n	80059a8 <pow+0x23c>
 80058d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f7fb f8fc 	bl	8000ad4 <__aeabi_dcmpun>
 80058dc:	f997 7000 	ldrsb.w	r7, [r7]
 80058e0:	4b49      	ldr	r3, [pc, #292]	; (8005a08 <pow+0x29c>)
 80058e2:	b1a0      	cbz	r0, 800590e <pow+0x1a2>
 80058e4:	2201      	movs	r2, #1
 80058e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058ea:	9b02      	ldr	r3, [sp, #8]
 80058ec:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80058f0:	930c      	str	r3, [sp, #48]	; 0x30
 80058f2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80058f6:	2f00      	cmp	r7, #0
 80058f8:	d0c9      	beq.n	800588e <pow+0x122>
 80058fa:	4652      	mov	r2, sl
 80058fc:	465b      	mov	r3, fp
 80058fe:	4650      	mov	r0, sl
 8005900:	4659      	mov	r1, fp
 8005902:	f7fa ff77 	bl	80007f4 <__aeabi_ddiv>
 8005906:	2f02      	cmp	r7, #2
 8005908:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800590c:	e7c7      	b.n	800589e <pow+0x132>
 800590e:	2203      	movs	r2, #3
 8005910:	900c      	str	r0, [sp, #48]	; 0x30
 8005912:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005916:	4620      	mov	r0, r4
 8005918:	4629      	mov	r1, r5
 800591a:	2200      	movs	r2, #0
 800591c:	4b3d      	ldr	r3, [pc, #244]	; (8005a14 <pow+0x2a8>)
 800591e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005922:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005926:	f7fa fe3b 	bl	80005a0 <__aeabi_dmul>
 800592a:	4604      	mov	r4, r0
 800592c:	460d      	mov	r5, r1
 800592e:	bb17      	cbnz	r7, 8005976 <pow+0x20a>
 8005930:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005934:	4b38      	ldr	r3, [pc, #224]	; (8005a18 <pow+0x2ac>)
 8005936:	4640      	mov	r0, r8
 8005938:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800593c:	4649      	mov	r1, r9
 800593e:	4652      	mov	r2, sl
 8005940:	465b      	mov	r3, fp
 8005942:	f7fb f89f 	bl	8000a84 <__aeabi_dcmplt>
 8005946:	2800      	cmp	r0, #0
 8005948:	d054      	beq.n	80059f4 <pow+0x288>
 800594a:	4620      	mov	r0, r4
 800594c:	4629      	mov	r1, r5
 800594e:	f000 fe33 	bl	80065b8 <rint>
 8005952:	4622      	mov	r2, r4
 8005954:	462b      	mov	r3, r5
 8005956:	f7fb f88b 	bl	8000a70 <__aeabi_dcmpeq>
 800595a:	b920      	cbnz	r0, 8005966 <pow+0x1fa>
 800595c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005960:	4b2e      	ldr	r3, [pc, #184]	; (8005a1c <pow+0x2b0>)
 8005962:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005966:	f996 3000 	ldrsb.w	r3, [r6]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d142      	bne.n	80059f4 <pow+0x288>
 800596e:	f000 ff27 	bl	80067c0 <__errno>
 8005972:	2322      	movs	r3, #34	; 0x22
 8005974:	e797      	b.n	80058a6 <pow+0x13a>
 8005976:	2200      	movs	r2, #0
 8005978:	4b29      	ldr	r3, [pc, #164]	; (8005a20 <pow+0x2b4>)
 800597a:	4640      	mov	r0, r8
 800597c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005980:	4649      	mov	r1, r9
 8005982:	4652      	mov	r2, sl
 8005984:	465b      	mov	r3, fp
 8005986:	f7fb f87d 	bl	8000a84 <__aeabi_dcmplt>
 800598a:	2800      	cmp	r0, #0
 800598c:	d0eb      	beq.n	8005966 <pow+0x1fa>
 800598e:	4620      	mov	r0, r4
 8005990:	4629      	mov	r1, r5
 8005992:	f000 fe11 	bl	80065b8 <rint>
 8005996:	4622      	mov	r2, r4
 8005998:	462b      	mov	r3, r5
 800599a:	f7fb f869 	bl	8000a70 <__aeabi_dcmpeq>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d1e1      	bne.n	8005966 <pow+0x1fa>
 80059a2:	2200      	movs	r2, #0
 80059a4:	4b1a      	ldr	r3, [pc, #104]	; (8005a10 <pow+0x2a4>)
 80059a6:	e7dc      	b.n	8005962 <pow+0x1f6>
 80059a8:	2200      	movs	r2, #0
 80059aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059ae:	2300      	movs	r3, #0
 80059b0:	f7fb f85e 	bl	8000a70 <__aeabi_dcmpeq>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	f43f af4b 	beq.w	8005850 <pow+0xe4>
 80059ba:	4640      	mov	r0, r8
 80059bc:	4649      	mov	r1, r9
 80059be:	f000 fded 	bl	800659c <finite>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	f43f af44 	beq.w	8005850 <pow+0xe4>
 80059c8:	4620      	mov	r0, r4
 80059ca:	4629      	mov	r1, r5
 80059cc:	f000 fde6 	bl	800659c <finite>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	f43f af3d 	beq.w	8005850 <pow+0xe4>
 80059d6:	2304      	movs	r3, #4
 80059d8:	9304      	str	r3, [sp, #16]
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <pow+0x29c>)
 80059dc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80059e0:	9305      	str	r3, [sp, #20]
 80059e2:	2300      	movs	r3, #0
 80059e4:	2400      	movs	r4, #0
 80059e6:	930c      	str	r3, [sp, #48]	; 0x30
 80059e8:	2300      	movs	r3, #0
 80059ea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80059ee:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80059f2:	e7b8      	b.n	8005966 <pow+0x1fa>
 80059f4:	a804      	add	r0, sp, #16
 80059f6:	f000 fdd7 	bl	80065a8 <matherr>
 80059fa:	2800      	cmp	r0, #0
 80059fc:	f47f af1e 	bne.w	800583c <pow+0xd0>
 8005a00:	e7b5      	b.n	800596e <pow+0x202>
 8005a02:	bf00      	nop
 8005a04:	20000090 	.word	0x20000090
 8005a08:	08006820 	.word	0x08006820
 8005a0c:	3ff00000 	.word	0x3ff00000
 8005a10:	fff00000 	.word	0xfff00000
 8005a14:	3fe00000 	.word	0x3fe00000
 8005a18:	47efffff 	.word	0x47efffff
 8005a1c:	c7efffff 	.word	0xc7efffff
 8005a20:	7ff00000 	.word	0x7ff00000
 8005a24:	00000000 	.word	0x00000000

08005a28 <__ieee754_pow>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	b091      	sub	sp, #68	; 0x44
 8005a2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a32:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005a36:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005a3a:	ea55 0302 	orrs.w	r3, r5, r2
 8005a3e:	4607      	mov	r7, r0
 8005a40:	4688      	mov	r8, r1
 8005a42:	f000 84b7 	beq.w	80063b4 <__ieee754_pow+0x98c>
 8005a46:	4b80      	ldr	r3, [pc, #512]	; (8005c48 <__ieee754_pow+0x220>)
 8005a48:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005a4c:	429c      	cmp	r4, r3
 8005a4e:	4689      	mov	r9, r1
 8005a50:	4682      	mov	sl, r0
 8005a52:	dc09      	bgt.n	8005a68 <__ieee754_pow+0x40>
 8005a54:	d103      	bne.n	8005a5e <__ieee754_pow+0x36>
 8005a56:	b938      	cbnz	r0, 8005a68 <__ieee754_pow+0x40>
 8005a58:	42a5      	cmp	r5, r4
 8005a5a:	dc0d      	bgt.n	8005a78 <__ieee754_pow+0x50>
 8005a5c:	e001      	b.n	8005a62 <__ieee754_pow+0x3a>
 8005a5e:	429d      	cmp	r5, r3
 8005a60:	dc02      	bgt.n	8005a68 <__ieee754_pow+0x40>
 8005a62:	429d      	cmp	r5, r3
 8005a64:	d10e      	bne.n	8005a84 <__ieee754_pow+0x5c>
 8005a66:	b16a      	cbz	r2, 8005a84 <__ieee754_pow+0x5c>
 8005a68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005a6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005a70:	ea54 030a 	orrs.w	r3, r4, sl
 8005a74:	f000 849e 	beq.w	80063b4 <__ieee754_pow+0x98c>
 8005a78:	4874      	ldr	r0, [pc, #464]	; (8005c4c <__ieee754_pow+0x224>)
 8005a7a:	b011      	add	sp, #68	; 0x44
 8005a7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a80:	f000 bd94 	b.w	80065ac <nan>
 8005a84:	f1b9 0f00 	cmp.w	r9, #0
 8005a88:	da53      	bge.n	8005b32 <__ieee754_pow+0x10a>
 8005a8a:	4b71      	ldr	r3, [pc, #452]	; (8005c50 <__ieee754_pow+0x228>)
 8005a8c:	429d      	cmp	r5, r3
 8005a8e:	dc4e      	bgt.n	8005b2e <__ieee754_pow+0x106>
 8005a90:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005a94:	429d      	cmp	r5, r3
 8005a96:	dd4c      	ble.n	8005b32 <__ieee754_pow+0x10a>
 8005a98:	152b      	asrs	r3, r5, #20
 8005a9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005a9e:	2b14      	cmp	r3, #20
 8005aa0:	dd28      	ble.n	8005af4 <__ieee754_pow+0xcc>
 8005aa2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005aa6:	fa22 f103 	lsr.w	r1, r2, r3
 8005aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d13f      	bne.n	8005b32 <__ieee754_pow+0x10a>
 8005ab2:	f001 0101 	and.w	r1, r1, #1
 8005ab6:	f1c1 0302 	rsb	r3, r1, #2
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	2a00      	cmp	r2, #0
 8005abe:	d15c      	bne.n	8005b7a <__ieee754_pow+0x152>
 8005ac0:	4b61      	ldr	r3, [pc, #388]	; (8005c48 <__ieee754_pow+0x220>)
 8005ac2:	429d      	cmp	r5, r3
 8005ac4:	d126      	bne.n	8005b14 <__ieee754_pow+0xec>
 8005ac6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005aca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005ace:	ea53 030a 	orrs.w	r3, r3, sl
 8005ad2:	f000 846f 	beq.w	80063b4 <__ieee754_pow+0x98c>
 8005ad6:	4b5f      	ldr	r3, [pc, #380]	; (8005c54 <__ieee754_pow+0x22c>)
 8005ad8:	429c      	cmp	r4, r3
 8005ada:	dd2c      	ble.n	8005b36 <__ieee754_pow+0x10e>
 8005adc:	2e00      	cmp	r6, #0
 8005ade:	f280 846f 	bge.w	80063c0 <__ieee754_pow+0x998>
 8005ae2:	f04f 0b00 	mov.w	fp, #0
 8005ae6:	f04f 0c00 	mov.w	ip, #0
 8005aea:	4658      	mov	r0, fp
 8005aec:	4661      	mov	r1, ip
 8005aee:	b011      	add	sp, #68	; 0x44
 8005af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af4:	2a00      	cmp	r2, #0
 8005af6:	d13e      	bne.n	8005b76 <__ieee754_pow+0x14e>
 8005af8:	f1c3 0314 	rsb	r3, r3, #20
 8005afc:	fa45 f103 	asr.w	r1, r5, r3
 8005b00:	fa01 f303 	lsl.w	r3, r1, r3
 8005b04:	42ab      	cmp	r3, r5
 8005b06:	f040 8463 	bne.w	80063d0 <__ieee754_pow+0x9a8>
 8005b0a:	f001 0101 	and.w	r1, r1, #1
 8005b0e:	f1c1 0302 	rsb	r3, r1, #2
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	4b50      	ldr	r3, [pc, #320]	; (8005c58 <__ieee754_pow+0x230>)
 8005b16:	429d      	cmp	r5, r3
 8005b18:	d114      	bne.n	8005b44 <__ieee754_pow+0x11c>
 8005b1a:	2e00      	cmp	r6, #0
 8005b1c:	f280 8454 	bge.w	80063c8 <__ieee754_pow+0x9a0>
 8005b20:	463a      	mov	r2, r7
 8005b22:	4643      	mov	r3, r8
 8005b24:	2000      	movs	r0, #0
 8005b26:	494c      	ldr	r1, [pc, #304]	; (8005c58 <__ieee754_pow+0x230>)
 8005b28:	f7fa fe64 	bl	80007f4 <__aeabi_ddiv>
 8005b2c:	e013      	b.n	8005b56 <__ieee754_pow+0x12e>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e7c3      	b.n	8005aba <__ieee754_pow+0x92>
 8005b32:	2300      	movs	r3, #0
 8005b34:	e7c1      	b.n	8005aba <__ieee754_pow+0x92>
 8005b36:	2e00      	cmp	r6, #0
 8005b38:	dad3      	bge.n	8005ae2 <__ieee754_pow+0xba>
 8005b3a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005b3e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005b42:	e7d2      	b.n	8005aea <__ieee754_pow+0xc2>
 8005b44:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005b48:	d108      	bne.n	8005b5c <__ieee754_pow+0x134>
 8005b4a:	463a      	mov	r2, r7
 8005b4c:	4643      	mov	r3, r8
 8005b4e:	4638      	mov	r0, r7
 8005b50:	4641      	mov	r1, r8
 8005b52:	f7fa fd25 	bl	80005a0 <__aeabi_dmul>
 8005b56:	4683      	mov	fp, r0
 8005b58:	468c      	mov	ip, r1
 8005b5a:	e7c6      	b.n	8005aea <__ieee754_pow+0xc2>
 8005b5c:	4b3f      	ldr	r3, [pc, #252]	; (8005c5c <__ieee754_pow+0x234>)
 8005b5e:	429e      	cmp	r6, r3
 8005b60:	d10b      	bne.n	8005b7a <__ieee754_pow+0x152>
 8005b62:	f1b9 0f00 	cmp.w	r9, #0
 8005b66:	db08      	blt.n	8005b7a <__ieee754_pow+0x152>
 8005b68:	4638      	mov	r0, r7
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	b011      	add	sp, #68	; 0x44
 8005b6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b72:	f000 bc63 	b.w	800643c <__ieee754_sqrt>
 8005b76:	2300      	movs	r3, #0
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	4641      	mov	r1, r8
 8005b7e:	f000 fd09 	bl	8006594 <fabs>
 8005b82:	4683      	mov	fp, r0
 8005b84:	468c      	mov	ip, r1
 8005b86:	f1ba 0f00 	cmp.w	sl, #0
 8005b8a:	d12b      	bne.n	8005be4 <__ieee754_pow+0x1bc>
 8005b8c:	b124      	cbz	r4, 8005b98 <__ieee754_pow+0x170>
 8005b8e:	4b32      	ldr	r3, [pc, #200]	; (8005c58 <__ieee754_pow+0x230>)
 8005b90:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d125      	bne.n	8005be4 <__ieee754_pow+0x1bc>
 8005b98:	2e00      	cmp	r6, #0
 8005b9a:	da07      	bge.n	8005bac <__ieee754_pow+0x184>
 8005b9c:	465a      	mov	r2, fp
 8005b9e:	4663      	mov	r3, ip
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	492d      	ldr	r1, [pc, #180]	; (8005c58 <__ieee754_pow+0x230>)
 8005ba4:	f7fa fe26 	bl	80007f4 <__aeabi_ddiv>
 8005ba8:	4683      	mov	fp, r0
 8005baa:	468c      	mov	ip, r1
 8005bac:	f1b9 0f00 	cmp.w	r9, #0
 8005bb0:	da9b      	bge.n	8005aea <__ieee754_pow+0xc2>
 8005bb2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005bb6:	9b00      	ldr	r3, [sp, #0]
 8005bb8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005bbc:	4323      	orrs	r3, r4
 8005bbe:	d108      	bne.n	8005bd2 <__ieee754_pow+0x1aa>
 8005bc0:	465a      	mov	r2, fp
 8005bc2:	4663      	mov	r3, ip
 8005bc4:	4658      	mov	r0, fp
 8005bc6:	4661      	mov	r1, ip
 8005bc8:	f7fa fb32 	bl	8000230 <__aeabi_dsub>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	e7aa      	b.n	8005b28 <__ieee754_pow+0x100>
 8005bd2:	9b00      	ldr	r3, [sp, #0]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d188      	bne.n	8005aea <__ieee754_pow+0xc2>
 8005bd8:	4658      	mov	r0, fp
 8005bda:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005bde:	4683      	mov	fp, r0
 8005be0:	469c      	mov	ip, r3
 8005be2:	e782      	b.n	8005aea <__ieee754_pow+0xc2>
 8005be4:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005be8:	f109 33ff 	add.w	r3, r9, #4294967295
 8005bec:	930d      	str	r3, [sp, #52]	; 0x34
 8005bee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005bf0:	9b00      	ldr	r3, [sp, #0]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	d104      	bne.n	8005c00 <__ieee754_pow+0x1d8>
 8005bf6:	463a      	mov	r2, r7
 8005bf8:	4643      	mov	r3, r8
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	e7e3      	b.n	8005bc8 <__ieee754_pow+0x1a0>
 8005c00:	4b17      	ldr	r3, [pc, #92]	; (8005c60 <__ieee754_pow+0x238>)
 8005c02:	429d      	cmp	r5, r3
 8005c04:	f340 80fe 	ble.w	8005e04 <__ieee754_pow+0x3dc>
 8005c08:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005c0c:	429d      	cmp	r5, r3
 8005c0e:	dd0b      	ble.n	8005c28 <__ieee754_pow+0x200>
 8005c10:	4b10      	ldr	r3, [pc, #64]	; (8005c54 <__ieee754_pow+0x22c>)
 8005c12:	429c      	cmp	r4, r3
 8005c14:	dc0e      	bgt.n	8005c34 <__ieee754_pow+0x20c>
 8005c16:	2e00      	cmp	r6, #0
 8005c18:	f6bf af63 	bge.w	8005ae2 <__ieee754_pow+0xba>
 8005c1c:	a308      	add	r3, pc, #32	; (adr r3, 8005c40 <__ieee754_pow+0x218>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	e794      	b.n	8005b52 <__ieee754_pow+0x12a>
 8005c28:	4b0e      	ldr	r3, [pc, #56]	; (8005c64 <__ieee754_pow+0x23c>)
 8005c2a:	429c      	cmp	r4, r3
 8005c2c:	ddf3      	ble.n	8005c16 <__ieee754_pow+0x1ee>
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <__ieee754_pow+0x230>)
 8005c30:	429c      	cmp	r4, r3
 8005c32:	dd19      	ble.n	8005c68 <__ieee754_pow+0x240>
 8005c34:	2e00      	cmp	r6, #0
 8005c36:	dcf1      	bgt.n	8005c1c <__ieee754_pow+0x1f4>
 8005c38:	e753      	b.n	8005ae2 <__ieee754_pow+0xba>
 8005c3a:	bf00      	nop
 8005c3c:	f3af 8000 	nop.w
 8005c40:	8800759c 	.word	0x8800759c
 8005c44:	7e37e43c 	.word	0x7e37e43c
 8005c48:	7ff00000 	.word	0x7ff00000
 8005c4c:	08006823 	.word	0x08006823
 8005c50:	433fffff 	.word	0x433fffff
 8005c54:	3fefffff 	.word	0x3fefffff
 8005c58:	3ff00000 	.word	0x3ff00000
 8005c5c:	3fe00000 	.word	0x3fe00000
 8005c60:	41e00000 	.word	0x41e00000
 8005c64:	3feffffe 	.word	0x3feffffe
 8005c68:	4661      	mov	r1, ip
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	4b60      	ldr	r3, [pc, #384]	; (8005df0 <__ieee754_pow+0x3c8>)
 8005c6e:	4658      	mov	r0, fp
 8005c70:	f7fa fade 	bl	8000230 <__aeabi_dsub>
 8005c74:	a354      	add	r3, pc, #336	; (adr r3, 8005dc8 <__ieee754_pow+0x3a0>)
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	460d      	mov	r5, r1
 8005c7e:	f7fa fc8f 	bl	80005a0 <__aeabi_dmul>
 8005c82:	a353      	add	r3, pc, #332	; (adr r3, 8005dd0 <__ieee754_pow+0x3a8>)
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	4606      	mov	r6, r0
 8005c8a:	460f      	mov	r7, r1
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7fa fc86 	bl	80005a0 <__aeabi_dmul>
 8005c94:	2200      	movs	r2, #0
 8005c96:	4682      	mov	sl, r0
 8005c98:	468b      	mov	fp, r1
 8005c9a:	4b56      	ldr	r3, [pc, #344]	; (8005df4 <__ieee754_pow+0x3cc>)
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	f7fa fc7e 	bl	80005a0 <__aeabi_dmul>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	a14b      	add	r1, pc, #300	; (adr r1, 8005dd8 <__ieee754_pow+0x3b0>)
 8005caa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cae:	f7fa fabf 	bl	8000230 <__aeabi_dsub>
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	462b      	mov	r3, r5
 8005cb6:	f7fa fc73 	bl	80005a0 <__aeabi_dmul>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	494d      	ldr	r1, [pc, #308]	; (8005df8 <__ieee754_pow+0x3d0>)
 8005cc2:	f7fa fab5 	bl	8000230 <__aeabi_dsub>
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	462b      	mov	r3, r5
 8005cca:	4680      	mov	r8, r0
 8005ccc:	4689      	mov	r9, r1
 8005cce:	4620      	mov	r0, r4
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	f7fa fc65 	bl	80005a0 <__aeabi_dmul>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4640      	mov	r0, r8
 8005cdc:	4649      	mov	r1, r9
 8005cde:	f7fa fc5f 	bl	80005a0 <__aeabi_dmul>
 8005ce2:	a33f      	add	r3, pc, #252	; (adr r3, 8005de0 <__ieee754_pow+0x3b8>)
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	f7fa fc5a 	bl	80005a0 <__aeabi_dmul>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4650      	mov	r0, sl
 8005cf2:	4659      	mov	r1, fp
 8005cf4:	f7fa fa9c 	bl	8000230 <__aeabi_dsub>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	460d      	mov	r5, r1
 8005d00:	4630      	mov	r0, r6
 8005d02:	4639      	mov	r1, r7
 8005d04:	f7fa fa96 	bl	8000234 <__adddf3>
 8005d08:	2000      	movs	r0, #0
 8005d0a:	468b      	mov	fp, r1
 8005d0c:	4682      	mov	sl, r0
 8005d0e:	4632      	mov	r2, r6
 8005d10:	463b      	mov	r3, r7
 8005d12:	f7fa fa8d 	bl	8000230 <__aeabi_dsub>
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	4629      	mov	r1, r5
 8005d1e:	f7fa fa87 	bl	8000230 <__aeabi_dsub>
 8005d22:	9b00      	ldr	r3, [sp, #0]
 8005d24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d26:	3b01      	subs	r3, #1
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	bf0c      	ite	eq
 8005d30:	4c32      	ldreq	r4, [pc, #200]	; (8005dfc <__ieee754_pow+0x3d4>)
 8005d32:	4c2f      	ldrne	r4, [pc, #188]	; (8005df0 <__ieee754_pow+0x3c8>)
 8005d34:	4606      	mov	r6, r0
 8005d36:	e9cd 3400 	strd	r3, r4, [sp]
 8005d3a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005d3e:	2400      	movs	r4, #0
 8005d40:	460f      	mov	r7, r1
 8005d42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d46:	4622      	mov	r2, r4
 8005d48:	462b      	mov	r3, r5
 8005d4a:	f7fa fa71 	bl	8000230 <__aeabi_dsub>
 8005d4e:	4652      	mov	r2, sl
 8005d50:	465b      	mov	r3, fp
 8005d52:	f7fa fc25 	bl	80005a0 <__aeabi_dmul>
 8005d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d5a:	4680      	mov	r8, r0
 8005d5c:	4689      	mov	r9, r1
 8005d5e:	4630      	mov	r0, r6
 8005d60:	4639      	mov	r1, r7
 8005d62:	f7fa fc1d 	bl	80005a0 <__aeabi_dmul>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	4649      	mov	r1, r9
 8005d6e:	f7fa fa61 	bl	8000234 <__adddf3>
 8005d72:	4622      	mov	r2, r4
 8005d74:	462b      	mov	r3, r5
 8005d76:	4680      	mov	r8, r0
 8005d78:	4689      	mov	r9, r1
 8005d7a:	4650      	mov	r0, sl
 8005d7c:	4659      	mov	r1, fp
 8005d7e:	f7fa fc0f 	bl	80005a0 <__aeabi_dmul>
 8005d82:	4604      	mov	r4, r0
 8005d84:	460d      	mov	r5, r1
 8005d86:	460b      	mov	r3, r1
 8005d88:	4602      	mov	r2, r0
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	4640      	mov	r0, r8
 8005d8e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005d92:	f7fa fa4f 	bl	8000234 <__adddf3>
 8005d96:	4b1a      	ldr	r3, [pc, #104]	; (8005e00 <__ieee754_pow+0x3d8>)
 8005d98:	4682      	mov	sl, r0
 8005d9a:	4299      	cmp	r1, r3
 8005d9c:	460f      	mov	r7, r1
 8005d9e:	460e      	mov	r6, r1
 8005da0:	f340 82e1 	ble.w	8006366 <__ieee754_pow+0x93e>
 8005da4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005da8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005dac:	4303      	orrs	r3, r0
 8005dae:	f000 81db 	beq.w	8006168 <__ieee754_pow+0x740>
 8005db2:	a30d      	add	r3, pc, #52	; (adr r3, 8005de8 <__ieee754_pow+0x3c0>)
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dbc:	f7fa fbf0 	bl	80005a0 <__aeabi_dmul>
 8005dc0:	a309      	add	r3, pc, #36	; (adr r3, 8005de8 <__ieee754_pow+0x3c0>)
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	e6c4      	b.n	8005b52 <__ieee754_pow+0x12a>
 8005dc8:	60000000 	.word	0x60000000
 8005dcc:	3ff71547 	.word	0x3ff71547
 8005dd0:	f85ddf44 	.word	0xf85ddf44
 8005dd4:	3e54ae0b 	.word	0x3e54ae0b
 8005dd8:	55555555 	.word	0x55555555
 8005ddc:	3fd55555 	.word	0x3fd55555
 8005de0:	652b82fe 	.word	0x652b82fe
 8005de4:	3ff71547 	.word	0x3ff71547
 8005de8:	8800759c 	.word	0x8800759c
 8005dec:	7e37e43c 	.word	0x7e37e43c
 8005df0:	3ff00000 	.word	0x3ff00000
 8005df4:	3fd00000 	.word	0x3fd00000
 8005df8:	3fe00000 	.word	0x3fe00000
 8005dfc:	bff00000 	.word	0xbff00000
 8005e00:	408fffff 	.word	0x408fffff
 8005e04:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	da08      	bge.n	8005e20 <__ieee754_pow+0x3f8>
 8005e0e:	4658      	mov	r0, fp
 8005e10:	4bcd      	ldr	r3, [pc, #820]	; (8006148 <__ieee754_pow+0x720>)
 8005e12:	4661      	mov	r1, ip
 8005e14:	f7fa fbc4 	bl	80005a0 <__aeabi_dmul>
 8005e18:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005e1c:	4683      	mov	fp, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	1523      	asrs	r3, r4, #20
 8005e22:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005e26:	4413      	add	r3, r2
 8005e28:	930c      	str	r3, [sp, #48]	; 0x30
 8005e2a:	4bc8      	ldr	r3, [pc, #800]	; (800614c <__ieee754_pow+0x724>)
 8005e2c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005e30:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005e34:	429c      	cmp	r4, r3
 8005e36:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005e3a:	dd08      	ble.n	8005e4e <__ieee754_pow+0x426>
 8005e3c:	4bc4      	ldr	r3, [pc, #784]	; (8006150 <__ieee754_pow+0x728>)
 8005e3e:	429c      	cmp	r4, r3
 8005e40:	f340 815b 	ble.w	80060fa <__ieee754_pow+0x6d2>
 8005e44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e46:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	930c      	str	r3, [sp, #48]	; 0x30
 8005e4e:	f04f 0800 	mov.w	r8, #0
 8005e52:	4658      	mov	r0, fp
 8005e54:	4629      	mov	r1, r5
 8005e56:	4bbf      	ldr	r3, [pc, #764]	; (8006154 <__ieee754_pow+0x72c>)
 8005e58:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005e5c:	444b      	add	r3, r9
 8005e5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e62:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005e66:	461a      	mov	r2, r3
 8005e68:	4623      	mov	r3, r4
 8005e6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e6e:	f7fa f9df 	bl	8000230 <__aeabi_dsub>
 8005e72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e76:	4606      	mov	r6, r0
 8005e78:	460f      	mov	r7, r1
 8005e7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e7e:	f7fa f9d9 	bl	8000234 <__adddf3>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	2000      	movs	r0, #0
 8005e88:	49b3      	ldr	r1, [pc, #716]	; (8006158 <__ieee754_pow+0x730>)
 8005e8a:	f7fa fcb3 	bl	80007f4 <__aeabi_ddiv>
 8005e8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4630      	mov	r0, r6
 8005e98:	4639      	mov	r1, r7
 8005e9a:	f7fa fb81 	bl	80005a0 <__aeabi_dmul>
 8005e9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ea2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005ea6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2200      	movs	r2, #0
 8005eae:	106d      	asrs	r5, r5, #1
 8005eb0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005eb4:	9304      	str	r3, [sp, #16]
 8005eb6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005eba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005ebe:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8005ec2:	4650      	mov	r0, sl
 8005ec4:	4659      	mov	r1, fp
 8005ec6:	4614      	mov	r4, r2
 8005ec8:	461d      	mov	r5, r3
 8005eca:	f7fa fb69 	bl	80005a0 <__aeabi_dmul>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	4639      	mov	r1, r7
 8005ed6:	f7fa f9ab 	bl	8000230 <__aeabi_dsub>
 8005eda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ede:	4606      	mov	r6, r0
 8005ee0:	460f      	mov	r7, r1
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	f7fa f9a3 	bl	8000230 <__aeabi_dsub>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ef2:	f7fa f99d 	bl	8000230 <__aeabi_dsub>
 8005ef6:	4652      	mov	r2, sl
 8005ef8:	465b      	mov	r3, fp
 8005efa:	f7fa fb51 	bl	80005a0 <__aeabi_dmul>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4630      	mov	r0, r6
 8005f04:	4639      	mov	r1, r7
 8005f06:	f7fa f993 	bl	8000230 <__aeabi_dsub>
 8005f0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005f0e:	f7fa fb47 	bl	80005a0 <__aeabi_dmul>
 8005f12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	f7fa fb3f 	bl	80005a0 <__aeabi_dmul>
 8005f22:	a377      	add	r3, pc, #476	; (adr r3, 8006100 <__ieee754_pow+0x6d8>)
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	4604      	mov	r4, r0
 8005f2a:	460d      	mov	r5, r1
 8005f2c:	f7fa fb38 	bl	80005a0 <__aeabi_dmul>
 8005f30:	a375      	add	r3, pc, #468	; (adr r3, 8006108 <__ieee754_pow+0x6e0>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f7fa f97d 	bl	8000234 <__adddf3>
 8005f3a:	4622      	mov	r2, r4
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	f7fa fb2f 	bl	80005a0 <__aeabi_dmul>
 8005f42:	a373      	add	r3, pc, #460	; (adr r3, 8006110 <__ieee754_pow+0x6e8>)
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f7fa f974 	bl	8000234 <__adddf3>
 8005f4c:	4622      	mov	r2, r4
 8005f4e:	462b      	mov	r3, r5
 8005f50:	f7fa fb26 	bl	80005a0 <__aeabi_dmul>
 8005f54:	a370      	add	r3, pc, #448	; (adr r3, 8006118 <__ieee754_pow+0x6f0>)
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	f7fa f96b 	bl	8000234 <__adddf3>
 8005f5e:	4622      	mov	r2, r4
 8005f60:	462b      	mov	r3, r5
 8005f62:	f7fa fb1d 	bl	80005a0 <__aeabi_dmul>
 8005f66:	a36e      	add	r3, pc, #440	; (adr r3, 8006120 <__ieee754_pow+0x6f8>)
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f7fa f962 	bl	8000234 <__adddf3>
 8005f70:	4622      	mov	r2, r4
 8005f72:	462b      	mov	r3, r5
 8005f74:	f7fa fb14 	bl	80005a0 <__aeabi_dmul>
 8005f78:	a36b      	add	r3, pc, #428	; (adr r3, 8006128 <__ieee754_pow+0x700>)
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	f7fa f959 	bl	8000234 <__adddf3>
 8005f82:	4622      	mov	r2, r4
 8005f84:	4606      	mov	r6, r0
 8005f86:	460f      	mov	r7, r1
 8005f88:	462b      	mov	r3, r5
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	f7fa fb07 	bl	80005a0 <__aeabi_dmul>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4630      	mov	r0, r6
 8005f98:	4639      	mov	r1, r7
 8005f9a:	f7fa fb01 	bl	80005a0 <__aeabi_dmul>
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	460d      	mov	r5, r1
 8005fa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fa6:	4652      	mov	r2, sl
 8005fa8:	465b      	mov	r3, fp
 8005faa:	f7fa f943 	bl	8000234 <__adddf3>
 8005fae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005fb2:	f7fa faf5 	bl	80005a0 <__aeabi_dmul>
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	462b      	mov	r3, r5
 8005fba:	f7fa f93b 	bl	8000234 <__adddf3>
 8005fbe:	4652      	mov	r2, sl
 8005fc0:	4606      	mov	r6, r0
 8005fc2:	460f      	mov	r7, r1
 8005fc4:	465b      	mov	r3, fp
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	4659      	mov	r1, fp
 8005fca:	f7fa fae9 	bl	80005a0 <__aeabi_dmul>
 8005fce:	2200      	movs	r2, #0
 8005fd0:	4b62      	ldr	r3, [pc, #392]	; (800615c <__ieee754_pow+0x734>)
 8005fd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005fd6:	f7fa f92d 	bl	8000234 <__adddf3>
 8005fda:	4632      	mov	r2, r6
 8005fdc:	463b      	mov	r3, r7
 8005fde:	f7fa f929 	bl	8000234 <__adddf3>
 8005fe2:	9804      	ldr	r0, [sp, #16]
 8005fe4:	460d      	mov	r5, r1
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4650      	mov	r0, sl
 8005fee:	4659      	mov	r1, fp
 8005ff0:	f7fa fad6 	bl	80005a0 <__aeabi_dmul>
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4682      	mov	sl, r0
 8005ff8:	468b      	mov	fp, r1
 8005ffa:	4b58      	ldr	r3, [pc, #352]	; (800615c <__ieee754_pow+0x734>)
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	4629      	mov	r1, r5
 8006000:	f7fa f916 	bl	8000230 <__aeabi_dsub>
 8006004:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006008:	f7fa f912 	bl	8000230 <__aeabi_dsub>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4630      	mov	r0, r6
 8006012:	4639      	mov	r1, r7
 8006014:	f7fa f90c 	bl	8000230 <__aeabi_dsub>
 8006018:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800601c:	f7fa fac0 	bl	80005a0 <__aeabi_dmul>
 8006020:	4622      	mov	r2, r4
 8006022:	4606      	mov	r6, r0
 8006024:	460f      	mov	r7, r1
 8006026:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800602a:	462b      	mov	r3, r5
 800602c:	f7fa fab8 	bl	80005a0 <__aeabi_dmul>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4630      	mov	r0, r6
 8006036:	4639      	mov	r1, r7
 8006038:	f7fa f8fc 	bl	8000234 <__adddf3>
 800603c:	4606      	mov	r6, r0
 800603e:	460f      	mov	r7, r1
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4650      	mov	r0, sl
 8006046:	4659      	mov	r1, fp
 8006048:	f7fa f8f4 	bl	8000234 <__adddf3>
 800604c:	a338      	add	r3, pc, #224	; (adr r3, 8006130 <__ieee754_pow+0x708>)
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	9804      	ldr	r0, [sp, #16]
 8006054:	460d      	mov	r5, r1
 8006056:	4604      	mov	r4, r0
 8006058:	f7fa faa2 	bl	80005a0 <__aeabi_dmul>
 800605c:	4652      	mov	r2, sl
 800605e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006062:	465b      	mov	r3, fp
 8006064:	4620      	mov	r0, r4
 8006066:	4629      	mov	r1, r5
 8006068:	f7fa f8e2 	bl	8000230 <__aeabi_dsub>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4630      	mov	r0, r6
 8006072:	4639      	mov	r1, r7
 8006074:	f7fa f8dc 	bl	8000230 <__aeabi_dsub>
 8006078:	a32f      	add	r3, pc, #188	; (adr r3, 8006138 <__ieee754_pow+0x710>)
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	f7fa fa8f 	bl	80005a0 <__aeabi_dmul>
 8006082:	a32f      	add	r3, pc, #188	; (adr r3, 8006140 <__ieee754_pow+0x718>)
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	4606      	mov	r6, r0
 800608a:	460f      	mov	r7, r1
 800608c:	4620      	mov	r0, r4
 800608e:	4629      	mov	r1, r5
 8006090:	f7fa fa86 	bl	80005a0 <__aeabi_dmul>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4630      	mov	r0, r6
 800609a:	4639      	mov	r1, r7
 800609c:	f7fa f8ca 	bl	8000234 <__adddf3>
 80060a0:	4b2f      	ldr	r3, [pc, #188]	; (8006160 <__ieee754_pow+0x738>)
 80060a2:	444b      	add	r3, r9
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f7fa f8c4 	bl	8000234 <__adddf3>
 80060ac:	4604      	mov	r4, r0
 80060ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 80060b0:	460d      	mov	r5, r1
 80060b2:	f7fa fa0b 	bl	80004cc <__aeabi_i2d>
 80060b6:	4606      	mov	r6, r0
 80060b8:	460f      	mov	r7, r1
 80060ba:	4b2a      	ldr	r3, [pc, #168]	; (8006164 <__ieee754_pow+0x73c>)
 80060bc:	4622      	mov	r2, r4
 80060be:	444b      	add	r3, r9
 80060c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060c4:	462b      	mov	r3, r5
 80060c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060ca:	f7fa f8b3 	bl	8000234 <__adddf3>
 80060ce:	4642      	mov	r2, r8
 80060d0:	464b      	mov	r3, r9
 80060d2:	f7fa f8af 	bl	8000234 <__adddf3>
 80060d6:	4632      	mov	r2, r6
 80060d8:	463b      	mov	r3, r7
 80060da:	f7fa f8ab 	bl	8000234 <__adddf3>
 80060de:	9804      	ldr	r0, [sp, #16]
 80060e0:	4632      	mov	r2, r6
 80060e2:	463b      	mov	r3, r7
 80060e4:	4682      	mov	sl, r0
 80060e6:	468b      	mov	fp, r1
 80060e8:	f7fa f8a2 	bl	8000230 <__aeabi_dsub>
 80060ec:	4642      	mov	r2, r8
 80060ee:	464b      	mov	r3, r9
 80060f0:	f7fa f89e 	bl	8000230 <__aeabi_dsub>
 80060f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060f8:	e60b      	b.n	8005d12 <__ieee754_pow+0x2ea>
 80060fa:	f04f 0801 	mov.w	r8, #1
 80060fe:	e6a8      	b.n	8005e52 <__ieee754_pow+0x42a>
 8006100:	4a454eef 	.word	0x4a454eef
 8006104:	3fca7e28 	.word	0x3fca7e28
 8006108:	93c9db65 	.word	0x93c9db65
 800610c:	3fcd864a 	.word	0x3fcd864a
 8006110:	a91d4101 	.word	0xa91d4101
 8006114:	3fd17460 	.word	0x3fd17460
 8006118:	518f264d 	.word	0x518f264d
 800611c:	3fd55555 	.word	0x3fd55555
 8006120:	db6fabff 	.word	0xdb6fabff
 8006124:	3fdb6db6 	.word	0x3fdb6db6
 8006128:	33333303 	.word	0x33333303
 800612c:	3fe33333 	.word	0x3fe33333
 8006130:	e0000000 	.word	0xe0000000
 8006134:	3feec709 	.word	0x3feec709
 8006138:	dc3a03fd 	.word	0xdc3a03fd
 800613c:	3feec709 	.word	0x3feec709
 8006140:	145b01f5 	.word	0x145b01f5
 8006144:	be3e2fe0 	.word	0xbe3e2fe0
 8006148:	43400000 	.word	0x43400000
 800614c:	0003988e 	.word	0x0003988e
 8006150:	000bb679 	.word	0x000bb679
 8006154:	08006828 	.word	0x08006828
 8006158:	3ff00000 	.word	0x3ff00000
 800615c:	40080000 	.word	0x40080000
 8006160:	08006848 	.word	0x08006848
 8006164:	08006838 	.word	0x08006838
 8006168:	a39b      	add	r3, pc, #620	; (adr r3, 80063d8 <__ieee754_pow+0x9b0>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	4640      	mov	r0, r8
 8006170:	4649      	mov	r1, r9
 8006172:	f7fa f85f 	bl	8000234 <__adddf3>
 8006176:	4622      	mov	r2, r4
 8006178:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800617c:	462b      	mov	r3, r5
 800617e:	4650      	mov	r0, sl
 8006180:	4639      	mov	r1, r7
 8006182:	f7fa f855 	bl	8000230 <__aeabi_dsub>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800618e:	f7fa fc97 	bl	8000ac0 <__aeabi_dcmpgt>
 8006192:	2800      	cmp	r0, #0
 8006194:	f47f ae0d 	bne.w	8005db2 <__ieee754_pow+0x38a>
 8006198:	4aa3      	ldr	r2, [pc, #652]	; (8006428 <__ieee754_pow+0xa00>)
 800619a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800619e:	4293      	cmp	r3, r2
 80061a0:	f340 8103 	ble.w	80063aa <__ieee754_pow+0x982>
 80061a4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80061a8:	2000      	movs	r0, #0
 80061aa:	151b      	asrs	r3, r3, #20
 80061ac:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80061b0:	fa4a f303 	asr.w	r3, sl, r3
 80061b4:	4433      	add	r3, r6
 80061b6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80061ba:	4f9c      	ldr	r7, [pc, #624]	; (800642c <__ieee754_pow+0xa04>)
 80061bc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80061c0:	4117      	asrs	r7, r2
 80061c2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80061c6:	ea23 0107 	bic.w	r1, r3, r7
 80061ca:	f1c2 0214 	rsb	r2, r2, #20
 80061ce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80061d2:	fa4a fa02 	asr.w	sl, sl, r2
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4620      	mov	r0, r4
 80061de:	4629      	mov	r1, r5
 80061e0:	bfb8      	it	lt
 80061e2:	f1ca 0a00 	rsblt	sl, sl, #0
 80061e6:	f7fa f823 	bl	8000230 <__aeabi_dsub>
 80061ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f2:	4642      	mov	r2, r8
 80061f4:	464b      	mov	r3, r9
 80061f6:	f7fa f81d 	bl	8000234 <__adddf3>
 80061fa:	a379      	add	r3, pc, #484	; (adr r3, 80063e0 <__ieee754_pow+0x9b8>)
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	2000      	movs	r0, #0
 8006202:	460d      	mov	r5, r1
 8006204:	4604      	mov	r4, r0
 8006206:	f7fa f9cb 	bl	80005a0 <__aeabi_dmul>
 800620a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800620e:	4606      	mov	r6, r0
 8006210:	460f      	mov	r7, r1
 8006212:	4620      	mov	r0, r4
 8006214:	4629      	mov	r1, r5
 8006216:	f7fa f80b 	bl	8000230 <__aeabi_dsub>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4640      	mov	r0, r8
 8006220:	4649      	mov	r1, r9
 8006222:	f7fa f805 	bl	8000230 <__aeabi_dsub>
 8006226:	a370      	add	r3, pc, #448	; (adr r3, 80063e8 <__ieee754_pow+0x9c0>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	f7fa f9b8 	bl	80005a0 <__aeabi_dmul>
 8006230:	a36f      	add	r3, pc, #444	; (adr r3, 80063f0 <__ieee754_pow+0x9c8>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	4680      	mov	r8, r0
 8006238:	4689      	mov	r9, r1
 800623a:	4620      	mov	r0, r4
 800623c:	4629      	mov	r1, r5
 800623e:	f7fa f9af 	bl	80005a0 <__aeabi_dmul>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4640      	mov	r0, r8
 8006248:	4649      	mov	r1, r9
 800624a:	f7f9 fff3 	bl	8000234 <__adddf3>
 800624e:	4604      	mov	r4, r0
 8006250:	460d      	mov	r5, r1
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	4630      	mov	r0, r6
 8006258:	4639      	mov	r1, r7
 800625a:	f7f9 ffeb 	bl	8000234 <__adddf3>
 800625e:	4632      	mov	r2, r6
 8006260:	463b      	mov	r3, r7
 8006262:	4680      	mov	r8, r0
 8006264:	4689      	mov	r9, r1
 8006266:	f7f9 ffe3 	bl	8000230 <__aeabi_dsub>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	4620      	mov	r0, r4
 8006270:	4629      	mov	r1, r5
 8006272:	f7f9 ffdd 	bl	8000230 <__aeabi_dsub>
 8006276:	4642      	mov	r2, r8
 8006278:	4606      	mov	r6, r0
 800627a:	460f      	mov	r7, r1
 800627c:	464b      	mov	r3, r9
 800627e:	4640      	mov	r0, r8
 8006280:	4649      	mov	r1, r9
 8006282:	f7fa f98d 	bl	80005a0 <__aeabi_dmul>
 8006286:	a35c      	add	r3, pc, #368	; (adr r3, 80063f8 <__ieee754_pow+0x9d0>)
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	4604      	mov	r4, r0
 800628e:	460d      	mov	r5, r1
 8006290:	f7fa f986 	bl	80005a0 <__aeabi_dmul>
 8006294:	a35a      	add	r3, pc, #360	; (adr r3, 8006400 <__ieee754_pow+0x9d8>)
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	f7f9 ffc9 	bl	8000230 <__aeabi_dsub>
 800629e:	4622      	mov	r2, r4
 80062a0:	462b      	mov	r3, r5
 80062a2:	f7fa f97d 	bl	80005a0 <__aeabi_dmul>
 80062a6:	a358      	add	r3, pc, #352	; (adr r3, 8006408 <__ieee754_pow+0x9e0>)
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f7f9 ffc2 	bl	8000234 <__adddf3>
 80062b0:	4622      	mov	r2, r4
 80062b2:	462b      	mov	r3, r5
 80062b4:	f7fa f974 	bl	80005a0 <__aeabi_dmul>
 80062b8:	a355      	add	r3, pc, #340	; (adr r3, 8006410 <__ieee754_pow+0x9e8>)
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f7f9 ffb7 	bl	8000230 <__aeabi_dsub>
 80062c2:	4622      	mov	r2, r4
 80062c4:	462b      	mov	r3, r5
 80062c6:	f7fa f96b 	bl	80005a0 <__aeabi_dmul>
 80062ca:	a353      	add	r3, pc, #332	; (adr r3, 8006418 <__ieee754_pow+0x9f0>)
 80062cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d0:	f7f9 ffb0 	bl	8000234 <__adddf3>
 80062d4:	4622      	mov	r2, r4
 80062d6:	462b      	mov	r3, r5
 80062d8:	f7fa f962 	bl	80005a0 <__aeabi_dmul>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	4640      	mov	r0, r8
 80062e2:	4649      	mov	r1, r9
 80062e4:	f7f9 ffa4 	bl	8000230 <__aeabi_dsub>
 80062e8:	4604      	mov	r4, r0
 80062ea:	460d      	mov	r5, r1
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4640      	mov	r0, r8
 80062f2:	4649      	mov	r1, r9
 80062f4:	f7fa f954 	bl	80005a0 <__aeabi_dmul>
 80062f8:	2200      	movs	r2, #0
 80062fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006302:	4620      	mov	r0, r4
 8006304:	4629      	mov	r1, r5
 8006306:	f7f9 ff93 	bl	8000230 <__aeabi_dsub>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006312:	f7fa fa6f 	bl	80007f4 <__aeabi_ddiv>
 8006316:	4632      	mov	r2, r6
 8006318:	4604      	mov	r4, r0
 800631a:	460d      	mov	r5, r1
 800631c:	463b      	mov	r3, r7
 800631e:	4640      	mov	r0, r8
 8006320:	4649      	mov	r1, r9
 8006322:	f7fa f93d 	bl	80005a0 <__aeabi_dmul>
 8006326:	4632      	mov	r2, r6
 8006328:	463b      	mov	r3, r7
 800632a:	f7f9 ff83 	bl	8000234 <__adddf3>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4620      	mov	r0, r4
 8006334:	4629      	mov	r1, r5
 8006336:	f7f9 ff7b 	bl	8000230 <__aeabi_dsub>
 800633a:	4642      	mov	r2, r8
 800633c:	464b      	mov	r3, r9
 800633e:	f7f9 ff77 	bl	8000230 <__aeabi_dsub>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	2000      	movs	r0, #0
 8006348:	4939      	ldr	r1, [pc, #228]	; (8006430 <__ieee754_pow+0xa08>)
 800634a:	f7f9 ff71 	bl	8000230 <__aeabi_dsub>
 800634e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006352:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006356:	da2b      	bge.n	80063b0 <__ieee754_pow+0x988>
 8006358:	4652      	mov	r2, sl
 800635a:	f000 f9b9 	bl	80066d0 <scalbn>
 800635e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006362:	f7ff bbf6 	b.w	8005b52 <__ieee754_pow+0x12a>
 8006366:	4b33      	ldr	r3, [pc, #204]	; (8006434 <__ieee754_pow+0xa0c>)
 8006368:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800636c:	429f      	cmp	r7, r3
 800636e:	f77f af13 	ble.w	8006198 <__ieee754_pow+0x770>
 8006372:	4b31      	ldr	r3, [pc, #196]	; (8006438 <__ieee754_pow+0xa10>)
 8006374:	440b      	add	r3, r1
 8006376:	4303      	orrs	r3, r0
 8006378:	d00b      	beq.n	8006392 <__ieee754_pow+0x96a>
 800637a:	a329      	add	r3, pc, #164	; (adr r3, 8006420 <__ieee754_pow+0x9f8>)
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006384:	f7fa f90c 	bl	80005a0 <__aeabi_dmul>
 8006388:	a325      	add	r3, pc, #148	; (adr r3, 8006420 <__ieee754_pow+0x9f8>)
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f7ff bbe0 	b.w	8005b52 <__ieee754_pow+0x12a>
 8006392:	4622      	mov	r2, r4
 8006394:	462b      	mov	r3, r5
 8006396:	f7f9 ff4b 	bl	8000230 <__aeabi_dsub>
 800639a:	4642      	mov	r2, r8
 800639c:	464b      	mov	r3, r9
 800639e:	f7fa fb85 	bl	8000aac <__aeabi_dcmpge>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	f43f aef8 	beq.w	8006198 <__ieee754_pow+0x770>
 80063a8:	e7e7      	b.n	800637a <__ieee754_pow+0x952>
 80063aa:	f04f 0a00 	mov.w	sl, #0
 80063ae:	e71e      	b.n	80061ee <__ieee754_pow+0x7c6>
 80063b0:	4621      	mov	r1, r4
 80063b2:	e7d4      	b.n	800635e <__ieee754_pow+0x936>
 80063b4:	f04f 0b00 	mov.w	fp, #0
 80063b8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006430 <__ieee754_pow+0xa08>
 80063bc:	f7ff bb95 	b.w	8005aea <__ieee754_pow+0xc2>
 80063c0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80063c4:	f7ff bb91 	b.w	8005aea <__ieee754_pow+0xc2>
 80063c8:	4638      	mov	r0, r7
 80063ca:	4641      	mov	r1, r8
 80063cc:	f7ff bbc3 	b.w	8005b56 <__ieee754_pow+0x12e>
 80063d0:	9200      	str	r2, [sp, #0]
 80063d2:	f7ff bb9f 	b.w	8005b14 <__ieee754_pow+0xec>
 80063d6:	bf00      	nop
 80063d8:	652b82fe 	.word	0x652b82fe
 80063dc:	3c971547 	.word	0x3c971547
 80063e0:	00000000 	.word	0x00000000
 80063e4:	3fe62e43 	.word	0x3fe62e43
 80063e8:	fefa39ef 	.word	0xfefa39ef
 80063ec:	3fe62e42 	.word	0x3fe62e42
 80063f0:	0ca86c39 	.word	0x0ca86c39
 80063f4:	be205c61 	.word	0xbe205c61
 80063f8:	72bea4d0 	.word	0x72bea4d0
 80063fc:	3e663769 	.word	0x3e663769
 8006400:	c5d26bf1 	.word	0xc5d26bf1
 8006404:	3ebbbd41 	.word	0x3ebbbd41
 8006408:	af25de2c 	.word	0xaf25de2c
 800640c:	3f11566a 	.word	0x3f11566a
 8006410:	16bebd93 	.word	0x16bebd93
 8006414:	3f66c16c 	.word	0x3f66c16c
 8006418:	5555553e 	.word	0x5555553e
 800641c:	3fc55555 	.word	0x3fc55555
 8006420:	c2f8f359 	.word	0xc2f8f359
 8006424:	01a56e1f 	.word	0x01a56e1f
 8006428:	3fe00000 	.word	0x3fe00000
 800642c:	000fffff 	.word	0x000fffff
 8006430:	3ff00000 	.word	0x3ff00000
 8006434:	4090cbff 	.word	0x4090cbff
 8006438:	3f6f3400 	.word	0x3f6f3400

0800643c <__ieee754_sqrt>:
 800643c:	4b54      	ldr	r3, [pc, #336]	; (8006590 <__ieee754_sqrt+0x154>)
 800643e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006442:	438b      	bics	r3, r1
 8006444:	4606      	mov	r6, r0
 8006446:	460d      	mov	r5, r1
 8006448:	460a      	mov	r2, r1
 800644a:	460c      	mov	r4, r1
 800644c:	d10f      	bne.n	800646e <__ieee754_sqrt+0x32>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	f7fa f8a5 	bl	80005a0 <__aeabi_dmul>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4630      	mov	r0, r6
 800645c:	4629      	mov	r1, r5
 800645e:	f7f9 fee9 	bl	8000234 <__adddf3>
 8006462:	4606      	mov	r6, r0
 8006464:	460d      	mov	r5, r1
 8006466:	4630      	mov	r0, r6
 8006468:	4629      	mov	r1, r5
 800646a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800646e:	2900      	cmp	r1, #0
 8006470:	4607      	mov	r7, r0
 8006472:	4603      	mov	r3, r0
 8006474:	dc0e      	bgt.n	8006494 <__ieee754_sqrt+0x58>
 8006476:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800647a:	ea5c 0707 	orrs.w	r7, ip, r7
 800647e:	d0f2      	beq.n	8006466 <__ieee754_sqrt+0x2a>
 8006480:	b141      	cbz	r1, 8006494 <__ieee754_sqrt+0x58>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	f7f9 fed3 	bl	8000230 <__aeabi_dsub>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	f7fa f9b1 	bl	80007f4 <__aeabi_ddiv>
 8006492:	e7e6      	b.n	8006462 <__ieee754_sqrt+0x26>
 8006494:	1512      	asrs	r2, r2, #20
 8006496:	d074      	beq.n	8006582 <__ieee754_sqrt+0x146>
 8006498:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800649c:	07d5      	lsls	r5, r2, #31
 800649e:	f04f 0500 	mov.w	r5, #0
 80064a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80064a6:	bf48      	it	mi
 80064a8:	0fd9      	lsrmi	r1, r3, #31
 80064aa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80064ae:	bf44      	itt	mi
 80064b0:	005b      	lslmi	r3, r3, #1
 80064b2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80064b6:	1051      	asrs	r1, r2, #1
 80064b8:	0fda      	lsrs	r2, r3, #31
 80064ba:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80064be:	4628      	mov	r0, r5
 80064c0:	2216      	movs	r2, #22
 80064c2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	1987      	adds	r7, r0, r6
 80064ca:	42a7      	cmp	r7, r4
 80064cc:	bfde      	ittt	le
 80064ce:	19b8      	addle	r0, r7, r6
 80064d0:	1be4      	suble	r4, r4, r7
 80064d2:	19ad      	addle	r5, r5, r6
 80064d4:	0fdf      	lsrs	r7, r3, #31
 80064d6:	3a01      	subs	r2, #1
 80064d8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80064dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80064e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80064e4:	d1f0      	bne.n	80064c8 <__ieee754_sqrt+0x8c>
 80064e6:	f04f 0c20 	mov.w	ip, #32
 80064ea:	4696      	mov	lr, r2
 80064ec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80064f0:	4284      	cmp	r4, r0
 80064f2:	eb06 070e 	add.w	r7, r6, lr
 80064f6:	dc02      	bgt.n	80064fe <__ieee754_sqrt+0xc2>
 80064f8:	d112      	bne.n	8006520 <__ieee754_sqrt+0xe4>
 80064fa:	429f      	cmp	r7, r3
 80064fc:	d810      	bhi.n	8006520 <__ieee754_sqrt+0xe4>
 80064fe:	2f00      	cmp	r7, #0
 8006500:	eb07 0e06 	add.w	lr, r7, r6
 8006504:	da42      	bge.n	800658c <__ieee754_sqrt+0x150>
 8006506:	f1be 0f00 	cmp.w	lr, #0
 800650a:	db3f      	blt.n	800658c <__ieee754_sqrt+0x150>
 800650c:	f100 0801 	add.w	r8, r0, #1
 8006510:	1a24      	subs	r4, r4, r0
 8006512:	4640      	mov	r0, r8
 8006514:	429f      	cmp	r7, r3
 8006516:	bf88      	it	hi
 8006518:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800651c:	1bdb      	subs	r3, r3, r7
 800651e:	4432      	add	r2, r6
 8006520:	0064      	lsls	r4, r4, #1
 8006522:	f1bc 0c01 	subs.w	ip, ip, #1
 8006526:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800652a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800652e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006532:	d1dd      	bne.n	80064f0 <__ieee754_sqrt+0xb4>
 8006534:	4323      	orrs	r3, r4
 8006536:	d006      	beq.n	8006546 <__ieee754_sqrt+0x10a>
 8006538:	1c54      	adds	r4, r2, #1
 800653a:	bf0b      	itete	eq
 800653c:	4662      	moveq	r2, ip
 800653e:	3201      	addne	r2, #1
 8006540:	3501      	addeq	r5, #1
 8006542:	f022 0201 	bicne.w	r2, r2, #1
 8006546:	106b      	asrs	r3, r5, #1
 8006548:	0852      	lsrs	r2, r2, #1
 800654a:	07e8      	lsls	r0, r5, #31
 800654c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006550:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006554:	bf48      	it	mi
 8006556:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800655a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800655e:	4616      	mov	r6, r2
 8006560:	e781      	b.n	8006466 <__ieee754_sqrt+0x2a>
 8006562:	0adc      	lsrs	r4, r3, #11
 8006564:	3915      	subs	r1, #21
 8006566:	055b      	lsls	r3, r3, #21
 8006568:	2c00      	cmp	r4, #0
 800656a:	d0fa      	beq.n	8006562 <__ieee754_sqrt+0x126>
 800656c:	02e6      	lsls	r6, r4, #11
 800656e:	d50a      	bpl.n	8006586 <__ieee754_sqrt+0x14a>
 8006570:	f1c2 0020 	rsb	r0, r2, #32
 8006574:	fa23 f000 	lsr.w	r0, r3, r0
 8006578:	1e55      	subs	r5, r2, #1
 800657a:	4093      	lsls	r3, r2
 800657c:	4304      	orrs	r4, r0
 800657e:	1b4a      	subs	r2, r1, r5
 8006580:	e78a      	b.n	8006498 <__ieee754_sqrt+0x5c>
 8006582:	4611      	mov	r1, r2
 8006584:	e7f0      	b.n	8006568 <__ieee754_sqrt+0x12c>
 8006586:	0064      	lsls	r4, r4, #1
 8006588:	3201      	adds	r2, #1
 800658a:	e7ef      	b.n	800656c <__ieee754_sqrt+0x130>
 800658c:	4680      	mov	r8, r0
 800658e:	e7bf      	b.n	8006510 <__ieee754_sqrt+0xd4>
 8006590:	7ff00000 	.word	0x7ff00000

08006594 <fabs>:
 8006594:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006598:	4619      	mov	r1, r3
 800659a:	4770      	bx	lr

0800659c <finite>:
 800659c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80065a0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80065a4:	0fc0      	lsrs	r0, r0, #31
 80065a6:	4770      	bx	lr

080065a8 <matherr>:
 80065a8:	2000      	movs	r0, #0
 80065aa:	4770      	bx	lr

080065ac <nan>:
 80065ac:	2000      	movs	r0, #0
 80065ae:	4901      	ldr	r1, [pc, #4]	; (80065b4 <nan+0x8>)
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	7ff80000 	.word	0x7ff80000

080065b8 <rint>:
 80065b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80065be:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 80065c2:	f1bc 0f13 	cmp.w	ip, #19
 80065c6:	4604      	mov	r4, r0
 80065c8:	460d      	mov	r5, r1
 80065ca:	460b      	mov	r3, r1
 80065cc:	4606      	mov	r6, r0
 80065ce:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 80065d2:	dc5a      	bgt.n	800668a <rint+0xd2>
 80065d4:	f1bc 0f00 	cmp.w	ip, #0
 80065d8:	da2b      	bge.n	8006632 <rint+0x7a>
 80065da:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80065de:	4302      	orrs	r2, r0
 80065e0:	d023      	beq.n	800662a <rint+0x72>
 80065e2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80065e6:	4302      	orrs	r2, r0
 80065e8:	4256      	negs	r6, r2
 80065ea:	4316      	orrs	r6, r2
 80065ec:	0c4b      	lsrs	r3, r1, #17
 80065ee:	0b36      	lsrs	r6, r6, #12
 80065f0:	4934      	ldr	r1, [pc, #208]	; (80066c4 <rint+0x10c>)
 80065f2:	045b      	lsls	r3, r3, #17
 80065f4:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 80065f8:	ea46 0503 	orr.w	r5, r6, r3
 80065fc:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8006600:	4602      	mov	r2, r0
 8006602:	462b      	mov	r3, r5
 8006604:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006608:	4620      	mov	r0, r4
 800660a:	4629      	mov	r1, r5
 800660c:	f7f9 fe12 	bl	8000234 <__adddf3>
 8006610:	e9cd 0100 	strd	r0, r1, [sp]
 8006614:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006618:	462b      	mov	r3, r5
 800661a:	4622      	mov	r2, r4
 800661c:	f7f9 fe08 	bl	8000230 <__aeabi_dsub>
 8006620:	4604      	mov	r4, r0
 8006622:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006626:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800662a:	4620      	mov	r0, r4
 800662c:	4629      	mov	r1, r5
 800662e:	b003      	add	sp, #12
 8006630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006632:	4a25      	ldr	r2, [pc, #148]	; (80066c8 <rint+0x110>)
 8006634:	fa42 f20c 	asr.w	r2, r2, ip
 8006638:	4011      	ands	r1, r2
 800663a:	4301      	orrs	r1, r0
 800663c:	d0f5      	beq.n	800662a <rint+0x72>
 800663e:	0852      	lsrs	r2, r2, #1
 8006640:	ea05 0102 	and.w	r1, r5, r2
 8006644:	ea50 0601 	orrs.w	r6, r0, r1
 8006648:	d00c      	beq.n	8006664 <rint+0xac>
 800664a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800664e:	f1bc 0f13 	cmp.w	ip, #19
 8006652:	bf0c      	ite	eq
 8006654:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8006658:	2600      	movne	r6, #0
 800665a:	ea25 0202 	bic.w	r2, r5, r2
 800665e:	fa43 f30c 	asr.w	r3, r3, ip
 8006662:	4313      	orrs	r3, r2
 8006664:	4917      	ldr	r1, [pc, #92]	; (80066c4 <rint+0x10c>)
 8006666:	4632      	mov	r2, r6
 8006668:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800666c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006670:	4620      	mov	r0, r4
 8006672:	4629      	mov	r1, r5
 8006674:	f7f9 fdde 	bl	8000234 <__adddf3>
 8006678:	e9cd 0100 	strd	r0, r1, [sp]
 800667c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006680:	4622      	mov	r2, r4
 8006682:	462b      	mov	r3, r5
 8006684:	f7f9 fdd4 	bl	8000230 <__aeabi_dsub>
 8006688:	e008      	b.n	800669c <rint+0xe4>
 800668a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800668e:	dd08      	ble.n	80066a2 <rint+0xea>
 8006690:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8006694:	d1c9      	bne.n	800662a <rint+0x72>
 8006696:	4602      	mov	r2, r0
 8006698:	f7f9 fdcc 	bl	8000234 <__adddf3>
 800669c:	4604      	mov	r4, r0
 800669e:	460d      	mov	r5, r1
 80066a0:	e7c3      	b.n	800662a <rint+0x72>
 80066a2:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 80066a6:	f04f 32ff 	mov.w	r2, #4294967295
 80066aa:	40ca      	lsrs	r2, r1
 80066ac:	4210      	tst	r0, r2
 80066ae:	d0bc      	beq.n	800662a <rint+0x72>
 80066b0:	0852      	lsrs	r2, r2, #1
 80066b2:	4210      	tst	r0, r2
 80066b4:	bf1f      	itttt	ne
 80066b6:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 80066ba:	ea20 0202 	bicne.w	r2, r0, r2
 80066be:	410e      	asrne	r6, r1
 80066c0:	4316      	orrne	r6, r2
 80066c2:	e7cf      	b.n	8006664 <rint+0xac>
 80066c4:	08006858 	.word	0x08006858
 80066c8:	000fffff 	.word	0x000fffff
 80066cc:	00000000 	.word	0x00000000

080066d0 <scalbn>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	4616      	mov	r6, r2
 80066d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066d8:	4604      	mov	r4, r0
 80066da:	460d      	mov	r5, r1
 80066dc:	460b      	mov	r3, r1
 80066de:	b982      	cbnz	r2, 8006702 <scalbn+0x32>
 80066e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066e4:	4303      	orrs	r3, r0
 80066e6:	d034      	beq.n	8006752 <scalbn+0x82>
 80066e8:	4b2d      	ldr	r3, [pc, #180]	; (80067a0 <scalbn+0xd0>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	f7f9 ff58 	bl	80005a0 <__aeabi_dmul>
 80066f0:	4b2c      	ldr	r3, [pc, #176]	; (80067a4 <scalbn+0xd4>)
 80066f2:	4604      	mov	r4, r0
 80066f4:	429e      	cmp	r6, r3
 80066f6:	460d      	mov	r5, r1
 80066f8:	da0d      	bge.n	8006716 <scalbn+0x46>
 80066fa:	a325      	add	r3, pc, #148	; (adr r3, 8006790 <scalbn+0xc0>)
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	e01c      	b.n	800673c <scalbn+0x6c>
 8006702:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006706:	42ba      	cmp	r2, r7
 8006708:	d109      	bne.n	800671e <scalbn+0x4e>
 800670a:	4602      	mov	r2, r0
 800670c:	f7f9 fd92 	bl	8000234 <__adddf3>
 8006710:	4604      	mov	r4, r0
 8006712:	460d      	mov	r5, r1
 8006714:	e01d      	b.n	8006752 <scalbn+0x82>
 8006716:	460b      	mov	r3, r1
 8006718:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800671c:	3a36      	subs	r2, #54	; 0x36
 800671e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006722:	4432      	add	r2, r6
 8006724:	428a      	cmp	r2, r1
 8006726:	dd0c      	ble.n	8006742 <scalbn+0x72>
 8006728:	4622      	mov	r2, r4
 800672a:	462b      	mov	r3, r5
 800672c:	a11a      	add	r1, pc, #104	; (adr r1, 8006798 <scalbn+0xc8>)
 800672e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006732:	f000 f83b 	bl	80067ac <copysign>
 8006736:	a318      	add	r3, pc, #96	; (adr r3, 8006798 <scalbn+0xc8>)
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	f7f9 ff30 	bl	80005a0 <__aeabi_dmul>
 8006740:	e7e6      	b.n	8006710 <scalbn+0x40>
 8006742:	2a00      	cmp	r2, #0
 8006744:	dd08      	ble.n	8006758 <scalbn+0x88>
 8006746:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800674a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800674e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006752:	4620      	mov	r0, r4
 8006754:	4629      	mov	r1, r5
 8006756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006758:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800675c:	da0b      	bge.n	8006776 <scalbn+0xa6>
 800675e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006762:	429e      	cmp	r6, r3
 8006764:	4622      	mov	r2, r4
 8006766:	462b      	mov	r3, r5
 8006768:	dce0      	bgt.n	800672c <scalbn+0x5c>
 800676a:	a109      	add	r1, pc, #36	; (adr r1, 8006790 <scalbn+0xc0>)
 800676c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006770:	f000 f81c 	bl	80067ac <copysign>
 8006774:	e7c1      	b.n	80066fa <scalbn+0x2a>
 8006776:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800677a:	3236      	adds	r2, #54	; 0x36
 800677c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006780:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006784:	4620      	mov	r0, r4
 8006786:	4629      	mov	r1, r5
 8006788:	2200      	movs	r2, #0
 800678a:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <scalbn+0xd8>)
 800678c:	e7d6      	b.n	800673c <scalbn+0x6c>
 800678e:	bf00      	nop
 8006790:	c2f8f359 	.word	0xc2f8f359
 8006794:	01a56e1f 	.word	0x01a56e1f
 8006798:	8800759c 	.word	0x8800759c
 800679c:	7e37e43c 	.word	0x7e37e43c
 80067a0:	43500000 	.word	0x43500000
 80067a4:	ffff3cb0 	.word	0xffff3cb0
 80067a8:	3c900000 	.word	0x3c900000

080067ac <copysign>:
 80067ac:	b530      	push	{r4, r5, lr}
 80067ae:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80067b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067b6:	ea42 0503 	orr.w	r5, r2, r3
 80067ba:	4629      	mov	r1, r5
 80067bc:	bd30      	pop	{r4, r5, pc}
	...

080067c0 <__errno>:
 80067c0:	4b01      	ldr	r3, [pc, #4]	; (80067c8 <__errno+0x8>)
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	2000002c 	.word	0x2000002c

080067cc <_init>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	bf00      	nop
 80067d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d2:	bc08      	pop	{r3}
 80067d4:	469e      	mov	lr, r3
 80067d6:	4770      	bx	lr

080067d8 <_fini>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr
